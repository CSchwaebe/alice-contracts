/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface PointsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_POINTS"
      | "MIN_DEPOSIT"
      | "POINTS_PER_S"
      | "POINTS_PER_S_CASHOUT"
      | "addressList"
      | "addressToReferralCode"
      | "assignPoints"
      | "authorizedContracts"
      | "awardPointsForPayout"
      | "cashOutReferralPoints"
      | "deposit"
      | "depositFor(address,string)"
      | "depositFor(address)"
      | "depositForCashouts"
      | "getAddressCount"
      | "getAddressesPaginated"
      | "getLeaderboard"
      | "getPoints"
      | "getRemainingPoints"
      | "hasPoints"
      | "migrateReferralCode"
      | "migrateUsedReferralCode"
      | "owner"
      | "points"
      | "referralBonusBps"
      | "referralCodeToAddress"
      | "referralPoints"
      | "registerMe"
      | "registerReferralCode"
      | "renounceOwnership"
      | "setContractAuthorization"
      | "setReferralBonus"
      | "totalPointsIssued"
      | "transferOwnership"
      | "usedReferralCode"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CashoutDepositReceived"
      | "ContractAuthorizationChanged"
      | "OwnershipTransferred"
      | "PointsAwarded"
      | "PointsAwardedByContract"
      | "ReferralCodeRegistered"
      | "ReferralPointsCashedOut"
      | "ReferralUsed"
      | "Withdrawn"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_POINTS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_DEPOSIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "POINTS_PER_S",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "POINTS_PER_S_CASHOUT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addressList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addressToReferralCode",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "assignPoints",
    values: [AddressLike, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedContracts",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "awardPointsForPayout",
    values: [AddressLike, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "cashOutReferralPoints",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "depositFor(address,string)",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "depositFor(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "depositForCashouts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAddressCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAddressesPaginated",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLeaderboard",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPoints",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRemainingPoints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasPoints",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "migrateReferralCode",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "migrateUsedReferralCode",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "points", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "referralBonusBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "referralCodeToAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "referralPoints",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerMe",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerReferralCode",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setContractAuthorization",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setReferralBonus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalPointsIssued",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "usedReferralCode",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "MAX_POINTS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MIN_DEPOSIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "POINTS_PER_S",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "POINTS_PER_S_CASHOUT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressToReferralCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assignPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "awardPointsForPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cashOutReferralPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositFor(address,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositFor(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositForCashouts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAddressCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAddressesPaginated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLeaderboard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPoints", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRemainingPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasPoints", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "migrateReferralCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migrateUsedReferralCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "points", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "referralBonusBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referralCodeToAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referralPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registerMe", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerReferralCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContractAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReferralBonus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalPointsIssued",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usedReferralCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace CashoutDepositReceivedEvent {
  export type InputTuple = [depositor: AddressLike, amount: BigNumberish];
  export type OutputTuple = [depositor: string, amount: bigint];
  export interface OutputObject {
    depositor: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContractAuthorizationChangedEvent {
  export type InputTuple = [contractAddress: AddressLike, authorized: boolean];
  export type OutputTuple = [contractAddress: string, authorized: boolean];
  export interface OutputObject {
    contractAddress: string;
    authorized: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PointsAwardedEvent {
  export type InputTuple = [recipient: AddressLike, amount: BigNumberish];
  export type OutputTuple = [recipient: string, amount: bigint];
  export interface OutputObject {
    recipient: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PointsAwardedByContractEvent {
  export type InputTuple = [
    recipient: AddressLike,
    amount: BigNumberish,
    authorizedContract: AddressLike
  ];
  export type OutputTuple = [
    recipient: string,
    amount: bigint,
    authorizedContract: string
  ];
  export interface OutputObject {
    recipient: string;
    amount: bigint;
    authorizedContract: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReferralCodeRegisteredEvent {
  export type InputTuple = [user: AddressLike, code: string];
  export type OutputTuple = [user: string, code: string];
  export interface OutputObject {
    user: string;
    code: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReferralPointsCashedOutEvent {
  export type InputTuple = [
    user: AddressLike,
    points: BigNumberish,
    ethAmount: BigNumberish
  ];
  export type OutputTuple = [user: string, points: bigint, ethAmount: bigint];
  export interface OutputObject {
    user: string;
    points: bigint;
    ethAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReferralUsedEvent {
  export type InputTuple = [
    user: AddressLike,
    code: string,
    referrer: AddressLike
  ];
  export type OutputTuple = [user: string, code: string, referrer: string];
  export interface OutputObject {
    user: string;
    code: string;
    referrer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawnEvent {
  export type InputTuple = [owner: AddressLike, amount: BigNumberish];
  export type OutputTuple = [owner: string, amount: bigint];
  export interface OutputObject {
    owner: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Points extends BaseContract {
  connect(runner?: ContractRunner | null): Points;
  waitForDeployment(): Promise<this>;

  interface: PointsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_POINTS: TypedContractMethod<[], [bigint], "view">;

  MIN_DEPOSIT: TypedContractMethod<[], [bigint], "view">;

  POINTS_PER_S: TypedContractMethod<[], [bigint], "view">;

  POINTS_PER_S_CASHOUT: TypedContractMethod<[], [bigint], "view">;

  addressList: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  addressToReferralCode: TypedContractMethod<
    [arg0: AddressLike],
    [string],
    "view"
  >;

  assignPoints: TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish, isReferralPoints: boolean],
    [void],
    "nonpayable"
  >;

  authorizedContracts: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  awardPointsForPayout: TypedContractMethod<
    [
      recipient: AddressLike,
      pointsAmount: BigNumberish,
      isWithdrawable: boolean
    ],
    [void],
    "nonpayable"
  >;

  cashOutReferralPoints: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  deposit: TypedContractMethod<[], [void], "payable">;

  "depositFor(address,string)": TypedContractMethod<
    [recipient: AddressLike, referralCode: string],
    [void],
    "payable"
  >;

  "depositFor(address)": TypedContractMethod<
    [recipient: AddressLike],
    [void],
    "payable"
  >;

  depositForCashouts: TypedContractMethod<[], [void], "payable">;

  getAddressCount: TypedContractMethod<[], [bigint], "view">;

  getAddressesPaginated: TypedContractMethod<
    [start: BigNumberish, size: BigNumberish],
    [
      [string[], bigint[], bigint[]] & {
        addresses: string[];
        balances: bigint[];
        withdrawableBalances: bigint[];
      }
    ],
    "view"
  >;

  getLeaderboard: TypedContractMethod<
    [],
    [
      [string[], bigint[], bigint[]] & {
        topAddresses: string[];
        topBalances: bigint[];
        withdrawableBalances: bigint[];
      }
    ],
    "view"
  >;

  getPoints: TypedContractMethod<
    [account: AddressLike],
    [[bigint, bigint] & { total: bigint; withdrawable: bigint }],
    "view"
  >;

  getRemainingPoints: TypedContractMethod<[], [bigint], "view">;

  hasPoints: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  migrateReferralCode: TypedContractMethod<
    [user: AddressLike, code: string],
    [void],
    "nonpayable"
  >;

  migrateUsedReferralCode: TypedContractMethod<
    [user: AddressLike, referralCode: string],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  points: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  referralBonusBps: TypedContractMethod<[], [bigint], "view">;

  referralCodeToAddress: TypedContractMethod<[arg0: string], [string], "view">;

  referralPoints: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  registerMe: TypedContractMethod<[], [void], "nonpayable">;

  registerReferralCode: TypedContractMethod<
    [code: string],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setContractAuthorization: TypedContractMethod<
    [contractAddress: AddressLike, authorized: boolean],
    [void],
    "nonpayable"
  >;

  setReferralBonus: TypedContractMethod<
    [newBonusBps: BigNumberish],
    [void],
    "nonpayable"
  >;

  totalPointsIssued: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  usedReferralCode: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_POINTS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_DEPOSIT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "POINTS_PER_S"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "POINTS_PER_S_CASHOUT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addressList"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "addressToReferralCode"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "assignPoints"
  ): TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish, isReferralPoints: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "authorizedContracts"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "awardPointsForPayout"
  ): TypedContractMethod<
    [
      recipient: AddressLike,
      pointsAmount: BigNumberish,
      isWithdrawable: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "cashOutReferralPoints"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "depositFor(address,string)"
  ): TypedContractMethod<
    [recipient: AddressLike, referralCode: string],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "depositFor(address)"
  ): TypedContractMethod<[recipient: AddressLike], [void], "payable">;
  getFunction(
    nameOrSignature: "depositForCashouts"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "getAddressCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAddressesPaginated"
  ): TypedContractMethod<
    [start: BigNumberish, size: BigNumberish],
    [
      [string[], bigint[], bigint[]] & {
        addresses: string[];
        balances: bigint[];
        withdrawableBalances: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLeaderboard"
  ): TypedContractMethod<
    [],
    [
      [string[], bigint[], bigint[]] & {
        topAddresses: string[];
        topBalances: bigint[];
        withdrawableBalances: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPoints"
  ): TypedContractMethod<
    [account: AddressLike],
    [[bigint, bigint] & { total: bigint; withdrawable: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRemainingPoints"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "hasPoints"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "migrateReferralCode"
  ): TypedContractMethod<
    [user: AddressLike, code: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "migrateUsedReferralCode"
  ): TypedContractMethod<
    [user: AddressLike, referralCode: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "points"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "referralBonusBps"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "referralCodeToAddress"
  ): TypedContractMethod<[arg0: string], [string], "view">;
  getFunction(
    nameOrSignature: "referralPoints"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "registerMe"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "registerReferralCode"
  ): TypedContractMethod<[code: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setContractAuthorization"
  ): TypedContractMethod<
    [contractAddress: AddressLike, authorized: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setReferralBonus"
  ): TypedContractMethod<[newBonusBps: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "totalPointsIssued"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "usedReferralCode"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "CashoutDepositReceived"
  ): TypedContractEvent<
    CashoutDepositReceivedEvent.InputTuple,
    CashoutDepositReceivedEvent.OutputTuple,
    CashoutDepositReceivedEvent.OutputObject
  >;
  getEvent(
    key: "ContractAuthorizationChanged"
  ): TypedContractEvent<
    ContractAuthorizationChangedEvent.InputTuple,
    ContractAuthorizationChangedEvent.OutputTuple,
    ContractAuthorizationChangedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PointsAwarded"
  ): TypedContractEvent<
    PointsAwardedEvent.InputTuple,
    PointsAwardedEvent.OutputTuple,
    PointsAwardedEvent.OutputObject
  >;
  getEvent(
    key: "PointsAwardedByContract"
  ): TypedContractEvent<
    PointsAwardedByContractEvent.InputTuple,
    PointsAwardedByContractEvent.OutputTuple,
    PointsAwardedByContractEvent.OutputObject
  >;
  getEvent(
    key: "ReferralCodeRegistered"
  ): TypedContractEvent<
    ReferralCodeRegisteredEvent.InputTuple,
    ReferralCodeRegisteredEvent.OutputTuple,
    ReferralCodeRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "ReferralPointsCashedOut"
  ): TypedContractEvent<
    ReferralPointsCashedOutEvent.InputTuple,
    ReferralPointsCashedOutEvent.OutputTuple,
    ReferralPointsCashedOutEvent.OutputObject
  >;
  getEvent(
    key: "ReferralUsed"
  ): TypedContractEvent<
    ReferralUsedEvent.InputTuple,
    ReferralUsedEvent.OutputTuple,
    ReferralUsedEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawn"
  ): TypedContractEvent<
    WithdrawnEvent.InputTuple,
    WithdrawnEvent.OutputTuple,
    WithdrawnEvent.OutputObject
  >;

  filters: {
    "CashoutDepositReceived(address,uint256)": TypedContractEvent<
      CashoutDepositReceivedEvent.InputTuple,
      CashoutDepositReceivedEvent.OutputTuple,
      CashoutDepositReceivedEvent.OutputObject
    >;
    CashoutDepositReceived: TypedContractEvent<
      CashoutDepositReceivedEvent.InputTuple,
      CashoutDepositReceivedEvent.OutputTuple,
      CashoutDepositReceivedEvent.OutputObject
    >;

    "ContractAuthorizationChanged(address,bool)": TypedContractEvent<
      ContractAuthorizationChangedEvent.InputTuple,
      ContractAuthorizationChangedEvent.OutputTuple,
      ContractAuthorizationChangedEvent.OutputObject
    >;
    ContractAuthorizationChanged: TypedContractEvent<
      ContractAuthorizationChangedEvent.InputTuple,
      ContractAuthorizationChangedEvent.OutputTuple,
      ContractAuthorizationChangedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PointsAwarded(address,uint256)": TypedContractEvent<
      PointsAwardedEvent.InputTuple,
      PointsAwardedEvent.OutputTuple,
      PointsAwardedEvent.OutputObject
    >;
    PointsAwarded: TypedContractEvent<
      PointsAwardedEvent.InputTuple,
      PointsAwardedEvent.OutputTuple,
      PointsAwardedEvent.OutputObject
    >;

    "PointsAwardedByContract(address,uint256,address)": TypedContractEvent<
      PointsAwardedByContractEvent.InputTuple,
      PointsAwardedByContractEvent.OutputTuple,
      PointsAwardedByContractEvent.OutputObject
    >;
    PointsAwardedByContract: TypedContractEvent<
      PointsAwardedByContractEvent.InputTuple,
      PointsAwardedByContractEvent.OutputTuple,
      PointsAwardedByContractEvent.OutputObject
    >;

    "ReferralCodeRegistered(address,string)": TypedContractEvent<
      ReferralCodeRegisteredEvent.InputTuple,
      ReferralCodeRegisteredEvent.OutputTuple,
      ReferralCodeRegisteredEvent.OutputObject
    >;
    ReferralCodeRegistered: TypedContractEvent<
      ReferralCodeRegisteredEvent.InputTuple,
      ReferralCodeRegisteredEvent.OutputTuple,
      ReferralCodeRegisteredEvent.OutputObject
    >;

    "ReferralPointsCashedOut(address,uint256,uint256)": TypedContractEvent<
      ReferralPointsCashedOutEvent.InputTuple,
      ReferralPointsCashedOutEvent.OutputTuple,
      ReferralPointsCashedOutEvent.OutputObject
    >;
    ReferralPointsCashedOut: TypedContractEvent<
      ReferralPointsCashedOutEvent.InputTuple,
      ReferralPointsCashedOutEvent.OutputTuple,
      ReferralPointsCashedOutEvent.OutputObject
    >;

    "ReferralUsed(address,string,address)": TypedContractEvent<
      ReferralUsedEvent.InputTuple,
      ReferralUsedEvent.OutputTuple,
      ReferralUsedEvent.OutputObject
    >;
    ReferralUsed: TypedContractEvent<
      ReferralUsedEvent.InputTuple,
      ReferralUsedEvent.OutputTuple,
      ReferralUsedEvent.OutputObject
    >;

    "Withdrawn(address,uint256)": TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
    Withdrawn: TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
  };
}
