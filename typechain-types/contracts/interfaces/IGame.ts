/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type GameInstanceInfoStruct = {
  gameId: BigNumberish;
  state: BigNumberish;
  currentRound: BigNumberish;
  activePlayerCount: BigNumberish;
};

export type GameInstanceInfoStructOutput = [
  gameId: bigint,
  state: bigint,
  currentRound: bigint,
  activePlayerCount: bigint
] & {
  gameId: bigint;
  state: bigint;
  currentRound: bigint;
  activePlayerCount: bigint;
};

export declare namespace IGame {
  export type GameInfoStruct = {
    state: BigNumberish;
    currentRound: BigNumberish;
    roundEndTime: BigNumberish;
    gameStartTime: BigNumberish;
    gameEndTime: BigNumberish;
  };

  export type GameInfoStructOutput = [
    state: bigint,
    currentRound: bigint,
    roundEndTime: bigint,
    gameStartTime: bigint,
    gameEndTime: bigint
  ] & {
    state: bigint;
    currentRound: bigint;
    roundEndTime: bigint;
    gameStartTime: bigint;
    gameEndTime: bigint;
  };
}

export interface IGameInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "endExpiredGames"
      | "endGame"
      | "getActivePlayers"
      | "getGameInfo"
      | "getGameName"
      | "getGameState"
      | "getGames"
      | "getPlayerGameId"
      | "getPlayerNumber"
      | "getPlayers"
      | "initialize"
      | "startGames"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "GameInitialized"): EventFragment;

  encodeFunctionData(
    functionFragment: "endExpiredGames",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "endGame", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getActivePlayers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGameInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGameName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGameState",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getGames", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPlayerGameId",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerNumber",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "startGames",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "endExpiredGames",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getActivePlayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGameInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGameName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGameState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getGames", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerGameId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPlayers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startGames", data: BytesLike): Result;
}

export namespace GameInitializedEvent {
  export type InputTuple = [
    players: AddressLike[],
    playerNumbers: BigNumberish[]
  ];
  export type OutputTuple = [players: string[], playerNumbers: bigint[]];
  export interface OutputObject {
    players: string[];
    playerNumbers: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IGame extends BaseContract {
  connect(runner?: ContractRunner | null): IGame;
  waitForDeployment(): Promise<this>;

  interface: IGameInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  endExpiredGames: TypedContractMethod<[], [void], "nonpayable">;

  endGame: TypedContractMethod<[], [string[]], "nonpayable">;

  getActivePlayers: TypedContractMethod<[], [string[]], "view">;

  getGameInfo: TypedContractMethod<
    [gameId: BigNumberish],
    [IGame.GameInfoStructOutput],
    "view"
  >;

  getGameName: TypedContractMethod<[], [string], "view">;

  getGameState: TypedContractMethod<[gameId: BigNumberish], [bigint], "view">;

  getGames: TypedContractMethod<[], [GameInstanceInfoStructOutput[]], "view">;

  getPlayerGameId: TypedContractMethod<[player: AddressLike], [bigint], "view">;

  getPlayerNumber: TypedContractMethod<
    [gameId: BigNumberish, player: AddressLike],
    [bigint],
    "view"
  >;

  getPlayers: TypedContractMethod<[], [string[]], "view">;

  initialize: TypedContractMethod<
    [players: AddressLike[], playerNumbers: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  startGames: TypedContractMethod<[], [boolean], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "endExpiredGames"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "endGame"
  ): TypedContractMethod<[], [string[]], "nonpayable">;
  getFunction(
    nameOrSignature: "getActivePlayers"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getGameInfo"
  ): TypedContractMethod<
    [gameId: BigNumberish],
    [IGame.GameInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getGameName"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getGameState"
  ): TypedContractMethod<[gameId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getGames"
  ): TypedContractMethod<[], [GameInstanceInfoStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getPlayerGameId"
  ): TypedContractMethod<[player: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPlayerNumber"
  ): TypedContractMethod<
    [gameId: BigNumberish, player: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPlayers"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [players: AddressLike[], playerNumbers: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "startGames"
  ): TypedContractMethod<[], [boolean], "nonpayable">;

  getEvent(
    key: "GameInitialized"
  ): TypedContractEvent<
    GameInitializedEvent.InputTuple,
    GameInitializedEvent.OutputTuple,
    GameInitializedEvent.OutputObject
  >;

  filters: {
    "GameInitialized(address[],uint256[])": TypedContractEvent<
      GameInitializedEvent.InputTuple,
      GameInitializedEvent.OutputTuple,
      GameInitializedEvent.OutputObject
    >;
    GameInitialized: TypedContractEvent<
      GameInitializedEvent.InputTuple,
      GameInitializedEvent.OutputTuple,
      GameInitializedEvent.OutputObject
    >;
  };
}
