/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace Climb {
  export type GameEndDataStruct = {
    player: AddressLike;
    gameId: BigNumberish;
    finalLevel: BigNumberish;
    success: boolean;
    finalMultiplier: BigNumberish;
    payout: BigNumberish;
    endReason: string;
    paidInPoints: boolean;
  };

  export type GameEndDataStructOutput = [
    player: string,
    gameId: bigint,
    finalLevel: bigint,
    success: boolean,
    finalMultiplier: bigint,
    payout: bigint,
    endReason: string,
    paidInPoints: boolean
  ] & {
    player: string;
    gameId: bigint;
    finalLevel: bigint;
    success: boolean;
    finalMultiplier: bigint;
    payout: bigint;
    endReason: string;
    paidInPoints: boolean;
  };

  export type GameStartDataStruct = {
    player: AddressLike;
    gameId: BigNumberish;
    timestamp: BigNumberish;
    depositAmount: BigNumberish;
  };

  export type GameStartDataStructOutput = [
    player: string,
    gameId: bigint,
    timestamp: bigint,
    depositAmount: bigint
  ] & {
    player: string;
    gameId: bigint;
    timestamp: bigint;
    depositAmount: bigint;
  };

  export type RequestDataStruct = {
    player: AddressLike;
    gameId: BigNumberish;
    level: BigNumberish;
    sequenceNumber: BigNumberish;
  };

  export type RequestDataStructOutput = [
    player: string,
    gameId: bigint,
    level: bigint,
    sequenceNumber: bigint
  ] & { player: string; gameId: bigint; level: bigint; sequenceNumber: bigint };

  export type CompletedGameStruct = {
    gameId: BigNumberish;
    player: AddressLike;
    finalLevel: BigNumberish;
    success: boolean;
    finalMultiplier: BigNumberish;
    depositAmount: BigNumberish;
    payout: BigNumberish;
    startTime: BigNumberish;
    endTime: BigNumberish;
    endReason: string;
    paidInPoints: boolean;
  };

  export type CompletedGameStructOutput = [
    gameId: bigint,
    player: string,
    finalLevel: bigint,
    success: boolean,
    finalMultiplier: bigint,
    depositAmount: bigint,
    payout: bigint,
    startTime: bigint,
    endTime: bigint,
    endReason: string,
    paidInPoints: boolean
  ] & {
    gameId: bigint;
    player: string;
    finalLevel: bigint;
    success: boolean;
    finalMultiplier: bigint;
    depositAmount: bigint;
    payout: bigint;
    startTime: bigint;
    endTime: bigint;
    endReason: string;
    paidInPoints: boolean;
  };

  export type GameStateStruct = {
    currentLevel: BigNumberish;
    isActive: boolean;
    pendingSequence: BigNumberish;
    pendingType: BigNumberish;
    startTime: BigNumberish;
    depositAmount: BigNumberish;
    gameId: BigNumberish;
    targetLevel: BigNumberish;
  };

  export type GameStateStructOutput = [
    currentLevel: bigint,
    isActive: boolean,
    pendingSequence: bigint,
    pendingType: bigint,
    startTime: bigint,
    depositAmount: bigint,
    gameId: bigint,
    targetLevel: bigint
  ] & {
    currentLevel: bigint;
    isActive: boolean;
    pendingSequence: bigint;
    pendingType: bigint;
    startTime: bigint;
    depositAmount: bigint;
    gameId: bigint;
    targetLevel: bigint;
  };
}

export interface ClimbInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_LEVEL"
      | "MIN_CASHOUT_LEVEL"
      | "MIN_DEPOSIT"
      | "MULTIPLIER_PRECISION"
      | "ODDS_PRECISION"
      | "_entropyCallback"
      | "autoClimb"
      | "canPlayerAutoClimb"
      | "canPlayerCashOut"
      | "canPlayerClimb"
      | "cashOut"
      | "climb"
      | "completedGames"
      | "depositFunds"
      | "getAllLevelInfo"
      | "getAllMultipliers"
      | "getAllOdds"
      | "getAllPointMultipliers"
      | "getAutoClimbPathDetails"
      | "getAutoClimbSuccessProbability"
      | "getClimbOdds"
      | "getCompletedGame"
      | "getContractBalance"
      | "getLevelInfo"
      | "getMultiplier"
      | "getOdds"
      | "getPlayerGame"
      | "getPlayerGameCount"
      | "getPlayerGameHistory"
      | "getPlayerGameHistoryPaginated"
      | "getPlayerStats"
      | "getPointMultiplier"
      | "getPotentialPayout"
      | "getSuccessThreshold"
      | "isClimbSuccessful"
      | "isPointsPayout"
      | "maxDeposit"
      | "multiplier"
      | "odds"
      | "owner"
      | "playerGameHistory"
      | "playerGames"
      | "pointMultiplier"
      | "pointsAreWithdrawable"
      | "pointsContract"
      | "renounceOwnership"
      | "setMaxDeposit"
      | "setPointsContract"
      | "setPointsWithdrawable"
      | "startGame"
      | "totalGamesPlayed"
      | "transferOwnership"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AutoClimbCompleted"
      | "ClimbResult"
      | "EntropyReceived"
      | "FundsDeposited"
      | "GameEnded"
      | "GameStarted"
      | "MaxDepositChanged"
      | "OwnershipTransferred"
      | "PlayerCashedOut"
      | "PointsContractUpdated"
      | "PointsWithdrawableChanged"
      | "RequestAttempted"
  ): EventFragment;

  encodeFunctionData(functionFragment: "MAX_LEVEL", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MIN_CASHOUT_LEVEL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_DEPOSIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MULTIPLIER_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ODDS_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_entropyCallback",
    values: [BigNumberish, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "autoClimb",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canPlayerAutoClimb",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canPlayerCashOut",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "canPlayerClimb",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "cashOut", values?: undefined): string;
  encodeFunctionData(functionFragment: "climb", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "completedGames",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositFunds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllLevelInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllMultipliers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllOdds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllPointMultipliers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAutoClimbPathDetails",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAutoClimbSuccessProbability",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getClimbOdds",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCompletedGame",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLevelInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMultiplier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOdds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerGame",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerGameCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerGameHistory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerGameHistoryPaginated",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerStats",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPointMultiplier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPotentialPayout",
    values: [AddressLike, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getSuccessThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isClimbSuccessful",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isPointsPayout",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "maxDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multiplier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "odds", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "playerGameHistory",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "playerGames",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "pointMultiplier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pointsAreWithdrawable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pointsContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxDeposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPointsContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPointsWithdrawable",
    values: [boolean]
  ): string;
  encodeFunctionData(functionFragment: "startGame", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalGamesPlayed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "MAX_LEVEL", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MIN_CASHOUT_LEVEL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_DEPOSIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MULTIPLIER_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ODDS_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_entropyCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "autoClimb", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "canPlayerAutoClimb",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canPlayerCashOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canPlayerClimb",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cashOut", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "climb", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "completedGames",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllLevelInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllMultipliers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAllOdds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllPointMultipliers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAutoClimbPathDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAutoClimbSuccessProbability",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClimbOdds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCompletedGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLevelInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOdds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerGameCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerGameHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerGameHistoryPaginated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPointMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPotentialPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSuccessThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isClimbSuccessful",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPointsPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxDeposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multiplier", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "odds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "playerGameHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "playerGames",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pointMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pointsAreWithdrawable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pointsContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPointsContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPointsWithdrawable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalGamesPlayed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace AutoClimbCompletedEvent {
  export type InputTuple = [
    player: AddressLike,
    gameId: BigNumberish,
    startLevel: BigNumberish,
    finalLevel: BigNumberish,
    targetLevel: BigNumberish,
    reachedTarget: boolean
  ];
  export type OutputTuple = [
    player: string,
    gameId: bigint,
    startLevel: bigint,
    finalLevel: bigint,
    targetLevel: bigint,
    reachedTarget: boolean
  ];
  export interface OutputObject {
    player: string;
    gameId: bigint;
    startLevel: bigint;
    finalLevel: bigint;
    targetLevel: bigint;
    reachedTarget: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClimbResultEvent {
  export type InputTuple = [
    player: AddressLike,
    gameId: BigNumberish,
    fromLevel: BigNumberish,
    newLevel: BigNumberish,
    success: boolean,
    gameEnded: boolean,
    randomNumber: BigNumberish
  ];
  export type OutputTuple = [
    player: string,
    gameId: bigint,
    fromLevel: bigint,
    newLevel: bigint,
    success: boolean,
    gameEnded: boolean,
    randomNumber: bigint
  ];
  export interface OutputObject {
    player: string;
    gameId: bigint;
    fromLevel: bigint;
    newLevel: bigint;
    success: boolean;
    gameEnded: boolean;
    randomNumber: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EntropyReceivedEvent {
  export type InputTuple = [
    player: AddressLike,
    gameId: BigNumberish,
    sequenceNumber: BigNumberish,
    randomNumber: BigNumberish
  ];
  export type OutputTuple = [
    player: string,
    gameId: bigint,
    sequenceNumber: bigint,
    randomNumber: bigint
  ];
  export interface OutputObject {
    player: string;
    gameId: bigint;
    sequenceNumber: bigint;
    randomNumber: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsDepositedEvent {
  export type InputTuple = [depositor: AddressLike, amount: BigNumberish];
  export type OutputTuple = [depositor: string, amount: bigint];
  export interface OutputObject {
    depositor: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameEndedEvent {
  export type InputTuple = [data: Climb.GameEndDataStruct];
  export type OutputTuple = [data: Climb.GameEndDataStructOutput];
  export interface OutputObject {
    data: Climb.GameEndDataStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameStartedEvent {
  export type InputTuple = [data: Climb.GameStartDataStruct];
  export type OutputTuple = [data: Climb.GameStartDataStructOutput];
  export interface OutputObject {
    data: Climb.GameStartDataStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MaxDepositChangedEvent {
  export type InputTuple = [
    oldMaxDeposit: BigNumberish,
    newMaxDeposit: BigNumberish
  ];
  export type OutputTuple = [oldMaxDeposit: bigint, newMaxDeposit: bigint];
  export interface OutputObject {
    oldMaxDeposit: bigint;
    newMaxDeposit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlayerCashedOutEvent {
  export type InputTuple = [
    player: AddressLike,
    gameId: BigNumberish,
    level: BigNumberish,
    multiplierValue: BigNumberish,
    payout: BigNumberish,
    paidInPoints: boolean
  ];
  export type OutputTuple = [
    player: string,
    gameId: bigint,
    level: bigint,
    multiplierValue: bigint,
    payout: bigint,
    paidInPoints: boolean
  ];
  export interface OutputObject {
    player: string;
    gameId: bigint;
    level: bigint;
    multiplierValue: bigint;
    payout: bigint;
    paidInPoints: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PointsContractUpdatedEvent {
  export type InputTuple = [oldContract: AddressLike, newContract: AddressLike];
  export type OutputTuple = [oldContract: string, newContract: string];
  export interface OutputObject {
    oldContract: string;
    newContract: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PointsWithdrawableChangedEvent {
  export type InputTuple = [oldValue: boolean, newValue: boolean];
  export type OutputTuple = [oldValue: boolean, newValue: boolean];
  export interface OutputObject {
    oldValue: boolean;
    newValue: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestAttemptedEvent {
  export type InputTuple = [data: Climb.RequestDataStruct, isCashout: boolean];
  export type OutputTuple = [
    data: Climb.RequestDataStructOutput,
    isCashout: boolean
  ];
  export interface OutputObject {
    data: Climb.RequestDataStructOutput;
    isCashout: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Climb extends BaseContract {
  connect(runner?: ContractRunner | null): Climb;
  waitForDeployment(): Promise<this>;

  interface: ClimbInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_LEVEL: TypedContractMethod<[], [bigint], "view">;

  MIN_CASHOUT_LEVEL: TypedContractMethod<[], [bigint], "view">;

  MIN_DEPOSIT: TypedContractMethod<[], [bigint], "view">;

  MULTIPLIER_PRECISION: TypedContractMethod<[], [bigint], "view">;

  ODDS_PRECISION: TypedContractMethod<[], [bigint], "view">;

  _entropyCallback: TypedContractMethod<
    [sequence: BigNumberish, provider: AddressLike, randomNumber: BytesLike],
    [void],
    "nonpayable"
  >;

  autoClimb: TypedContractMethod<
    [targetLevel: BigNumberish],
    [bigint],
    "payable"
  >;

  canPlayerAutoClimb: TypedContractMethod<
    [player: AddressLike, targetLevel: BigNumberish],
    [boolean],
    "view"
  >;

  canPlayerCashOut: TypedContractMethod<
    [player: AddressLike],
    [boolean],
    "view"
  >;

  canPlayerClimb: TypedContractMethod<[player: AddressLike], [boolean], "view">;

  cashOut: TypedContractMethod<[], [void], "payable">;

  climb: TypedContractMethod<[], [bigint], "payable">;

  completedGames: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        bigint,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        boolean
      ] & {
        gameId: bigint;
        player: string;
        finalLevel: bigint;
        success: boolean;
        finalMultiplier: bigint;
        depositAmount: bigint;
        payout: bigint;
        startTime: bigint;
        endTime: bigint;
        endReason: string;
        paidInPoints: boolean;
      }
    ],
    "view"
  >;

  depositFunds: TypedContractMethod<[], [void], "payable">;

  getAllLevelInfo: TypedContractMethod<
    [],
    [
      [bigint[], bigint[], bigint[], bigint, bigint] & {
        allOdds: bigint[];
        allSonicMultipliers: bigint[];
        allPointMultipliers: bigint[];
        minCashoutLevel: bigint;
        maxLevel: bigint;
      }
    ],
    "view"
  >;

  getAllMultipliers: TypedContractMethod<[], [bigint[]], "view">;

  getAllOdds: TypedContractMethod<[], [bigint[]], "view">;

  getAllPointMultipliers: TypedContractMethod<[], [bigint[]], "view">;

  getAutoClimbPathDetails: TypedContractMethod<
    [player: AddressLike, targetLevel: BigNumberish],
    [
      [bigint[], bigint[], bigint[], bigint[], bigint] & {
        levels: bigint[];
        levelOdds: bigint[];
        sonicMultipliers: bigint[];
        pointMultipliers_: bigint[];
        overallSuccessProbability: bigint;
      }
    ],
    "view"
  >;

  getAutoClimbSuccessProbability: TypedContractMethod<
    [player: AddressLike, targetLevel: BigNumberish],
    [bigint],
    "view"
  >;

  getClimbOdds: TypedContractMethod<[player: AddressLike], [bigint], "view">;

  getCompletedGame: TypedContractMethod<
    [gameId: BigNumberish],
    [Climb.CompletedGameStructOutput],
    "view"
  >;

  getContractBalance: TypedContractMethod<[], [bigint], "view">;

  getLevelInfo: TypedContractMethod<
    [level: BigNumberish],
    [
      [bigint, bigint, bigint, boolean] & {
        oddsToReach: bigint;
        sonicMultiplier: bigint;
        pointMultiplier_: bigint;
        canCashOut: boolean;
      }
    ],
    "view"
  >;

  getMultiplier: TypedContractMethod<[level: BigNumberish], [bigint], "view">;

  getOdds: TypedContractMethod<[level: BigNumberish], [bigint], "view">;

  getPlayerGame: TypedContractMethod<
    [player: AddressLike],
    [Climb.GameStateStructOutput],
    "view"
  >;

  getPlayerGameCount: TypedContractMethod<
    [player: AddressLike],
    [bigint],
    "view"
  >;

  getPlayerGameHistory: TypedContractMethod<
    [player: AddressLike],
    [bigint[]],
    "view"
  >;

  getPlayerGameHistoryPaginated: TypedContractMethod<
    [player: AddressLike, offset: BigNumberish, limit: BigNumberish],
    [Climb.CompletedGameStructOutput[]],
    "view"
  >;

  getPlayerStats: TypedContractMethod<
    [player: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        totalGames: bigint;
        totalWins: bigint;
        totalBusts: bigint;
        totalDeposited: bigint;
        netProfit: bigint;
        totalAliceWon: bigint;
        totalSonicWon: bigint;
        highestLevelReached: bigint;
      }
    ],
    "view"
  >;

  getPointMultiplier: TypedContractMethod<
    [level: BigNumberish],
    [bigint],
    "view"
  >;

  getPotentialPayout: TypedContractMethod<
    [player: AddressLike, level: BigNumberish, isPoints: boolean],
    [bigint],
    "view"
  >;

  getSuccessThreshold: TypedContractMethod<
    [currentLevel: BigNumberish],
    [bigint],
    "view"
  >;

  isClimbSuccessful: TypedContractMethod<
    [randomNumber: BigNumberish, currentLevel: BigNumberish],
    [boolean],
    "view"
  >;

  isPointsPayout: TypedContractMethod<
    [randomNumber: BigNumberish],
    [boolean],
    "view"
  >;

  maxDeposit: TypedContractMethod<[], [bigint], "view">;

  multiplier: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  odds: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  playerGameHistory: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  playerGames: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, boolean, bigint, bigint, bigint, bigint, bigint, bigint] & {
        currentLevel: bigint;
        isActive: boolean;
        pendingSequence: bigint;
        pendingType: bigint;
        startTime: bigint;
        depositAmount: bigint;
        gameId: bigint;
        targetLevel: bigint;
      }
    ],
    "view"
  >;

  pointMultiplier: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  pointsAreWithdrawable: TypedContractMethod<[], [boolean], "view">;

  pointsContract: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setMaxDeposit: TypedContractMethod<
    [newMaxDeposit: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPointsContract: TypedContractMethod<
    [newPointsContract: AddressLike],
    [void],
    "nonpayable"
  >;

  setPointsWithdrawable: TypedContractMethod<
    [withdrawable: boolean],
    [void],
    "nonpayable"
  >;

  startGame: TypedContractMethod<[], [void], "payable">;

  totalGamesPlayed: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_LEVEL"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_CASHOUT_LEVEL"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_DEPOSIT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MULTIPLIER_PRECISION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ODDS_PRECISION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_entropyCallback"
  ): TypedContractMethod<
    [sequence: BigNumberish, provider: AddressLike, randomNumber: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "autoClimb"
  ): TypedContractMethod<[targetLevel: BigNumberish], [bigint], "payable">;
  getFunction(
    nameOrSignature: "canPlayerAutoClimb"
  ): TypedContractMethod<
    [player: AddressLike, targetLevel: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "canPlayerCashOut"
  ): TypedContractMethod<[player: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "canPlayerClimb"
  ): TypedContractMethod<[player: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "cashOut"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "climb"
  ): TypedContractMethod<[], [bigint], "payable">;
  getFunction(
    nameOrSignature: "completedGames"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        bigint,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        boolean
      ] & {
        gameId: bigint;
        player: string;
        finalLevel: bigint;
        success: boolean;
        finalMultiplier: bigint;
        depositAmount: bigint;
        payout: bigint;
        startTime: bigint;
        endTime: bigint;
        endReason: string;
        paidInPoints: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "depositFunds"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "getAllLevelInfo"
  ): TypedContractMethod<
    [],
    [
      [bigint[], bigint[], bigint[], bigint, bigint] & {
        allOdds: bigint[];
        allSonicMultipliers: bigint[];
        allPointMultipliers: bigint[];
        minCashoutLevel: bigint;
        maxLevel: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAllMultipliers"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getAllOdds"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getAllPointMultipliers"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getAutoClimbPathDetails"
  ): TypedContractMethod<
    [player: AddressLike, targetLevel: BigNumberish],
    [
      [bigint[], bigint[], bigint[], bigint[], bigint] & {
        levels: bigint[];
        levelOdds: bigint[];
        sonicMultipliers: bigint[];
        pointMultipliers_: bigint[];
        overallSuccessProbability: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAutoClimbSuccessProbability"
  ): TypedContractMethod<
    [player: AddressLike, targetLevel: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getClimbOdds"
  ): TypedContractMethod<[player: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCompletedGame"
  ): TypedContractMethod<
    [gameId: BigNumberish],
    [Climb.CompletedGameStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getContractBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLevelInfo"
  ): TypedContractMethod<
    [level: BigNumberish],
    [
      [bigint, bigint, bigint, boolean] & {
        oddsToReach: bigint;
        sonicMultiplier: bigint;
        pointMultiplier_: bigint;
        canCashOut: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMultiplier"
  ): TypedContractMethod<[level: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getOdds"
  ): TypedContractMethod<[level: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPlayerGame"
  ): TypedContractMethod<
    [player: AddressLike],
    [Climb.GameStateStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPlayerGameCount"
  ): TypedContractMethod<[player: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPlayerGameHistory"
  ): TypedContractMethod<[player: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getPlayerGameHistoryPaginated"
  ): TypedContractMethod<
    [player: AddressLike, offset: BigNumberish, limit: BigNumberish],
    [Climb.CompletedGameStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPlayerStats"
  ): TypedContractMethod<
    [player: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        totalGames: bigint;
        totalWins: bigint;
        totalBusts: bigint;
        totalDeposited: bigint;
        netProfit: bigint;
        totalAliceWon: bigint;
        totalSonicWon: bigint;
        highestLevelReached: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPointMultiplier"
  ): TypedContractMethod<[level: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPotentialPayout"
  ): TypedContractMethod<
    [player: AddressLike, level: BigNumberish, isPoints: boolean],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSuccessThreshold"
  ): TypedContractMethod<[currentLevel: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "isClimbSuccessful"
  ): TypedContractMethod<
    [randomNumber: BigNumberish, currentLevel: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isPointsPayout"
  ): TypedContractMethod<[randomNumber: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "maxDeposit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "multiplier"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "odds"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "playerGameHistory"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "playerGames"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, boolean, bigint, bigint, bigint, bigint, bigint, bigint] & {
        currentLevel: bigint;
        isActive: boolean;
        pendingSequence: bigint;
        pendingType: bigint;
        startTime: bigint;
        depositAmount: bigint;
        gameId: bigint;
        targetLevel: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "pointMultiplier"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "pointsAreWithdrawable"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "pointsContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMaxDeposit"
  ): TypedContractMethod<[newMaxDeposit: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPointsContract"
  ): TypedContractMethod<
    [newPointsContract: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPointsWithdrawable"
  ): TypedContractMethod<[withdrawable: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "startGame"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "totalGamesPlayed"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "AutoClimbCompleted"
  ): TypedContractEvent<
    AutoClimbCompletedEvent.InputTuple,
    AutoClimbCompletedEvent.OutputTuple,
    AutoClimbCompletedEvent.OutputObject
  >;
  getEvent(
    key: "ClimbResult"
  ): TypedContractEvent<
    ClimbResultEvent.InputTuple,
    ClimbResultEvent.OutputTuple,
    ClimbResultEvent.OutputObject
  >;
  getEvent(
    key: "EntropyReceived"
  ): TypedContractEvent<
    EntropyReceivedEvent.InputTuple,
    EntropyReceivedEvent.OutputTuple,
    EntropyReceivedEvent.OutputObject
  >;
  getEvent(
    key: "FundsDeposited"
  ): TypedContractEvent<
    FundsDepositedEvent.InputTuple,
    FundsDepositedEvent.OutputTuple,
    FundsDepositedEvent.OutputObject
  >;
  getEvent(
    key: "GameEnded"
  ): TypedContractEvent<
    GameEndedEvent.InputTuple,
    GameEndedEvent.OutputTuple,
    GameEndedEvent.OutputObject
  >;
  getEvent(
    key: "GameStarted"
  ): TypedContractEvent<
    GameStartedEvent.InputTuple,
    GameStartedEvent.OutputTuple,
    GameStartedEvent.OutputObject
  >;
  getEvent(
    key: "MaxDepositChanged"
  ): TypedContractEvent<
    MaxDepositChangedEvent.InputTuple,
    MaxDepositChangedEvent.OutputTuple,
    MaxDepositChangedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PlayerCashedOut"
  ): TypedContractEvent<
    PlayerCashedOutEvent.InputTuple,
    PlayerCashedOutEvent.OutputTuple,
    PlayerCashedOutEvent.OutputObject
  >;
  getEvent(
    key: "PointsContractUpdated"
  ): TypedContractEvent<
    PointsContractUpdatedEvent.InputTuple,
    PointsContractUpdatedEvent.OutputTuple,
    PointsContractUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "PointsWithdrawableChanged"
  ): TypedContractEvent<
    PointsWithdrawableChangedEvent.InputTuple,
    PointsWithdrawableChangedEvent.OutputTuple,
    PointsWithdrawableChangedEvent.OutputObject
  >;
  getEvent(
    key: "RequestAttempted"
  ): TypedContractEvent<
    RequestAttemptedEvent.InputTuple,
    RequestAttemptedEvent.OutputTuple,
    RequestAttemptedEvent.OutputObject
  >;

  filters: {
    "AutoClimbCompleted(address,uint256,uint8,uint8,uint8,bool)": TypedContractEvent<
      AutoClimbCompletedEvent.InputTuple,
      AutoClimbCompletedEvent.OutputTuple,
      AutoClimbCompletedEvent.OutputObject
    >;
    AutoClimbCompleted: TypedContractEvent<
      AutoClimbCompletedEvent.InputTuple,
      AutoClimbCompletedEvent.OutputTuple,
      AutoClimbCompletedEvent.OutputObject
    >;

    "ClimbResult(address,uint256,uint8,uint8,bool,bool,uint256)": TypedContractEvent<
      ClimbResultEvent.InputTuple,
      ClimbResultEvent.OutputTuple,
      ClimbResultEvent.OutputObject
    >;
    ClimbResult: TypedContractEvent<
      ClimbResultEvent.InputTuple,
      ClimbResultEvent.OutputTuple,
      ClimbResultEvent.OutputObject
    >;

    "EntropyReceived(address,uint256,uint64,uint256)": TypedContractEvent<
      EntropyReceivedEvent.InputTuple,
      EntropyReceivedEvent.OutputTuple,
      EntropyReceivedEvent.OutputObject
    >;
    EntropyReceived: TypedContractEvent<
      EntropyReceivedEvent.InputTuple,
      EntropyReceivedEvent.OutputTuple,
      EntropyReceivedEvent.OutputObject
    >;

    "FundsDeposited(address,uint256)": TypedContractEvent<
      FundsDepositedEvent.InputTuple,
      FundsDepositedEvent.OutputTuple,
      FundsDepositedEvent.OutputObject
    >;
    FundsDeposited: TypedContractEvent<
      FundsDepositedEvent.InputTuple,
      FundsDepositedEvent.OutputTuple,
      FundsDepositedEvent.OutputObject
    >;

    "GameEnded(tuple)": TypedContractEvent<
      GameEndedEvent.InputTuple,
      GameEndedEvent.OutputTuple,
      GameEndedEvent.OutputObject
    >;
    GameEnded: TypedContractEvent<
      GameEndedEvent.InputTuple,
      GameEndedEvent.OutputTuple,
      GameEndedEvent.OutputObject
    >;

    "GameStarted(tuple)": TypedContractEvent<
      GameStartedEvent.InputTuple,
      GameStartedEvent.OutputTuple,
      GameStartedEvent.OutputObject
    >;
    GameStarted: TypedContractEvent<
      GameStartedEvent.InputTuple,
      GameStartedEvent.OutputTuple,
      GameStartedEvent.OutputObject
    >;

    "MaxDepositChanged(uint256,uint256)": TypedContractEvent<
      MaxDepositChangedEvent.InputTuple,
      MaxDepositChangedEvent.OutputTuple,
      MaxDepositChangedEvent.OutputObject
    >;
    MaxDepositChanged: TypedContractEvent<
      MaxDepositChangedEvent.InputTuple,
      MaxDepositChangedEvent.OutputTuple,
      MaxDepositChangedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PlayerCashedOut(address,uint256,uint8,uint32,uint256,bool)": TypedContractEvent<
      PlayerCashedOutEvent.InputTuple,
      PlayerCashedOutEvent.OutputTuple,
      PlayerCashedOutEvent.OutputObject
    >;
    PlayerCashedOut: TypedContractEvent<
      PlayerCashedOutEvent.InputTuple,
      PlayerCashedOutEvent.OutputTuple,
      PlayerCashedOutEvent.OutputObject
    >;

    "PointsContractUpdated(address,address)": TypedContractEvent<
      PointsContractUpdatedEvent.InputTuple,
      PointsContractUpdatedEvent.OutputTuple,
      PointsContractUpdatedEvent.OutputObject
    >;
    PointsContractUpdated: TypedContractEvent<
      PointsContractUpdatedEvent.InputTuple,
      PointsContractUpdatedEvent.OutputTuple,
      PointsContractUpdatedEvent.OutputObject
    >;

    "PointsWithdrawableChanged(bool,bool)": TypedContractEvent<
      PointsWithdrawableChangedEvent.InputTuple,
      PointsWithdrawableChangedEvent.OutputTuple,
      PointsWithdrawableChangedEvent.OutputObject
    >;
    PointsWithdrawableChanged: TypedContractEvent<
      PointsWithdrawableChangedEvent.InputTuple,
      PointsWithdrawableChangedEvent.OutputTuple,
      PointsWithdrawableChangedEvent.OutputObject
    >;

    "RequestAttempted(tuple,bool)": TypedContractEvent<
      RequestAttemptedEvent.InputTuple,
      RequestAttemptedEvent.OutputTuple,
      RequestAttemptedEvent.OutputObject
    >;
    RequestAttempted: TypedContractEvent<
      RequestAttemptedEvent.InputTuple,
      RequestAttemptedEvent.OutputTuple,
      RequestAttemptedEvent.OutputObject
    >;
  };
}
