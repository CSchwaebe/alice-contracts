/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export type GameInstanceInfoStruct = {
  gameId: BigNumberish;
  state: BigNumberish;
  currentRound: BigNumberish;
  activePlayerCount: BigNumberish;
};

export type GameInstanceInfoStructOutput = [
  gameId: bigint,
  state: bigint,
  currentRound: bigint,
  activePlayerCount: bigint
] & {
  gameId: bigint;
  state: bigint;
  currentRound: bigint;
  activePlayerCount: bigint;
};

export declare namespace IGame {
  export type GameInfoStruct = {
    state: BigNumberish;
    currentRound: BigNumberish;
    roundEndTime: BigNumberish;
    gameStartTime: BigNumberish;
    gameEndTime: BigNumberish;
  };

  export type GameInfoStructOutput = [
    state: bigint,
    currentRound: bigint,
    roundEndTime: bigint,
    gameStartTime: bigint,
    gameEndTime: bigint
  ] & {
    state: bigint;
    currentRound: bigint;
    roundEndTime: bigint;
    gameStartTime: bigint;
    gameEndTime: bigint;
  };
}

export declare namespace Equilibrium {
  export type EquilibriumPlayerInfoStruct = {
    playerAddress: AddressLike;
    playerNumber: BigNumberish;
    team: BigNumberish;
    isActive: boolean;
  };

  export type EquilibriumPlayerInfoStructOutput = [
    playerAddress: string,
    playerNumber: bigint,
    team: bigint,
    isActive: boolean
  ] & {
    playerAddress: string;
    playerNumber: bigint;
    team: bigint;
    isActive: boolean;
  };
}

export interface EquilibriumInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "endExpiredGames"
      | "endGame"
      | "gameIdCounter"
      | "gameMaster"
      | "getActivePlayers"
      | "getGameInfo"
      | "getGameName"
      | "getGameState"
      | "getGames"
      | "getPlayerGameId"
      | "getPlayerInfo"
      | "getPlayerNumber"
      | "getPlayerTeam"
      | "getPlayers"
      | "getTeamSize"
      | "initialize"
      | "isPlayerInGame"
      | "owner"
      | "playerGameId"
      | "renounceOwnership"
      | "setGameMaster"
      | "startGames"
      | "switchTeam"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "GameCompleted"
      | "GameInitialized"
      | "GameMasterChanged"
      | "GameStarted"
      | "OwnershipTransferred"
      | "PlayerEliminated"
      | "PlayerSwitchedTeam"
      | "TeamEliminated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "endExpiredGames",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "endGame", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "gameIdCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gameMaster",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getActivePlayers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGameInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGameName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGameState",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getGames", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPlayerGameId",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerNumber",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerTeam",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTeamSize",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "isPlayerInGame",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "playerGameId",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setGameMaster",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "startGames",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "switchTeam",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "endExpiredGames",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "gameIdCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gameMaster", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getActivePlayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGameInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGameName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGameState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getGames", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerGameId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerTeam",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPlayers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTeamSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isPlayerInGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "playerGameId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGameMaster",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startGames", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "switchTeam", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace GameCompletedEvent {
  export type InputTuple = [gameId: BigNumberish, winners: AddressLike[]];
  export type OutputTuple = [gameId: bigint, winners: string[]];
  export interface OutputObject {
    gameId: bigint;
    winners: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameInitializedEvent {
  export type InputTuple = [
    players: AddressLike[],
    playerNumbers: BigNumberish[]
  ];
  export type OutputTuple = [players: string[], playerNumbers: bigint[]];
  export interface OutputObject {
    players: string[];
    playerNumbers: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameMasterChangedEvent {
  export type InputTuple = [newGameMaster: AddressLike];
  export type OutputTuple = [newGameMaster: string];
  export interface OutputObject {
    newGameMaster: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameStartedEvent {
  export type InputTuple = [gameId: BigNumberish, endTime: BigNumberish];
  export type OutputTuple = [gameId: bigint, endTime: bigint];
  export interface OutputObject {
    gameId: bigint;
    endTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlayerEliminatedEvent {
  export type InputTuple = [
    gameId: BigNumberish,
    player: AddressLike,
    playerNumber: BigNumberish
  ];
  export type OutputTuple = [
    gameId: bigint,
    player: string,
    playerNumber: bigint
  ];
  export interface OutputObject {
    gameId: bigint;
    player: string;
    playerNumber: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlayerSwitchedTeamEvent {
  export type InputTuple = [
    gameId: BigNumberish,
    player: AddressLike,
    fromTeam: BigNumberish,
    toTeam: BigNumberish
  ];
  export type OutputTuple = [
    gameId: bigint,
    player: string,
    fromTeam: bigint,
    toTeam: bigint
  ];
  export interface OutputObject {
    gameId: bigint;
    player: string;
    fromTeam: bigint;
    toTeam: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TeamEliminatedEvent {
  export type InputTuple = [
    gameId: BigNumberish,
    team: BigNumberish,
    teamSize: BigNumberish
  ];
  export type OutputTuple = [gameId: bigint, team: bigint, teamSize: bigint];
  export interface OutputObject {
    gameId: bigint;
    team: bigint;
    teamSize: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Equilibrium extends BaseContract {
  connect(runner?: ContractRunner | null): Equilibrium;
  waitForDeployment(): Promise<this>;

  interface: EquilibriumInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  endExpiredGames: TypedContractMethod<[], [void], "nonpayable">;

  endGame: TypedContractMethod<[], [string[]], "nonpayable">;

  gameIdCounter: TypedContractMethod<[], [bigint], "view">;

  gameMaster: TypedContractMethod<[], [string], "view">;

  getActivePlayers: TypedContractMethod<[], [string[]], "view">;

  getGameInfo: TypedContractMethod<
    [gameId: BigNumberish],
    [IGame.GameInfoStructOutput],
    "view"
  >;

  getGameName: TypedContractMethod<[], [string], "view">;

  getGameState: TypedContractMethod<[gameId: BigNumberish], [bigint], "view">;

  getGames: TypedContractMethod<[], [GameInstanceInfoStructOutput[]], "view">;

  getPlayerGameId: TypedContractMethod<[player: AddressLike], [bigint], "view">;

  getPlayerInfo: TypedContractMethod<
    [gameId: BigNumberish],
    [Equilibrium.EquilibriumPlayerInfoStructOutput[]],
    "view"
  >;

  getPlayerNumber: TypedContractMethod<
    [gameId: BigNumberish, player: AddressLike],
    [bigint],
    "view"
  >;

  getPlayerTeam: TypedContractMethod<
    [gameId: BigNumberish, player: AddressLike],
    [bigint],
    "view"
  >;

  getPlayers: TypedContractMethod<[], [string[]], "view">;

  getTeamSize: TypedContractMethod<
    [gameId: BigNumberish, team: BigNumberish],
    [bigint],
    "view"
  >;

  initialize: TypedContractMethod<
    [_players: AddressLike[], _playerNumbers: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  isPlayerInGame: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  playerGameId: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setGameMaster: TypedContractMethod<
    [_newGameMaster: AddressLike],
    [void],
    "nonpayable"
  >;

  startGames: TypedContractMethod<[], [boolean], "nonpayable">;

  switchTeam: TypedContractMethod<[team: BigNumberish], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "endExpiredGames"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "endGame"
  ): TypedContractMethod<[], [string[]], "nonpayable">;
  getFunction(
    nameOrSignature: "gameIdCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "gameMaster"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getActivePlayers"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getGameInfo"
  ): TypedContractMethod<
    [gameId: BigNumberish],
    [IGame.GameInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getGameName"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getGameState"
  ): TypedContractMethod<[gameId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getGames"
  ): TypedContractMethod<[], [GameInstanceInfoStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getPlayerGameId"
  ): TypedContractMethod<[player: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPlayerInfo"
  ): TypedContractMethod<
    [gameId: BigNumberish],
    [Equilibrium.EquilibriumPlayerInfoStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPlayerNumber"
  ): TypedContractMethod<
    [gameId: BigNumberish, player: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPlayerTeam"
  ): TypedContractMethod<
    [gameId: BigNumberish, player: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPlayers"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getTeamSize"
  ): TypedContractMethod<
    [gameId: BigNumberish, team: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [_players: AddressLike[], _playerNumbers: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isPlayerInGame"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "playerGameId"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setGameMaster"
  ): TypedContractMethod<[_newGameMaster: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "startGames"
  ): TypedContractMethod<[], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "switchTeam"
  ): TypedContractMethod<[team: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "GameCompleted"
  ): TypedContractEvent<
    GameCompletedEvent.InputTuple,
    GameCompletedEvent.OutputTuple,
    GameCompletedEvent.OutputObject
  >;
  getEvent(
    key: "GameInitialized"
  ): TypedContractEvent<
    GameInitializedEvent.InputTuple,
    GameInitializedEvent.OutputTuple,
    GameInitializedEvent.OutputObject
  >;
  getEvent(
    key: "GameMasterChanged"
  ): TypedContractEvent<
    GameMasterChangedEvent.InputTuple,
    GameMasterChangedEvent.OutputTuple,
    GameMasterChangedEvent.OutputObject
  >;
  getEvent(
    key: "GameStarted"
  ): TypedContractEvent<
    GameStartedEvent.InputTuple,
    GameStartedEvent.OutputTuple,
    GameStartedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PlayerEliminated"
  ): TypedContractEvent<
    PlayerEliminatedEvent.InputTuple,
    PlayerEliminatedEvent.OutputTuple,
    PlayerEliminatedEvent.OutputObject
  >;
  getEvent(
    key: "PlayerSwitchedTeam"
  ): TypedContractEvent<
    PlayerSwitchedTeamEvent.InputTuple,
    PlayerSwitchedTeamEvent.OutputTuple,
    PlayerSwitchedTeamEvent.OutputObject
  >;
  getEvent(
    key: "TeamEliminated"
  ): TypedContractEvent<
    TeamEliminatedEvent.InputTuple,
    TeamEliminatedEvent.OutputTuple,
    TeamEliminatedEvent.OutputObject
  >;

  filters: {
    "GameCompleted(uint256,address[])": TypedContractEvent<
      GameCompletedEvent.InputTuple,
      GameCompletedEvent.OutputTuple,
      GameCompletedEvent.OutputObject
    >;
    GameCompleted: TypedContractEvent<
      GameCompletedEvent.InputTuple,
      GameCompletedEvent.OutputTuple,
      GameCompletedEvent.OutputObject
    >;

    "GameInitialized(address[],uint256[])": TypedContractEvent<
      GameInitializedEvent.InputTuple,
      GameInitializedEvent.OutputTuple,
      GameInitializedEvent.OutputObject
    >;
    GameInitialized: TypedContractEvent<
      GameInitializedEvent.InputTuple,
      GameInitializedEvent.OutputTuple,
      GameInitializedEvent.OutputObject
    >;

    "GameMasterChanged(address)": TypedContractEvent<
      GameMasterChangedEvent.InputTuple,
      GameMasterChangedEvent.OutputTuple,
      GameMasterChangedEvent.OutputObject
    >;
    GameMasterChanged: TypedContractEvent<
      GameMasterChangedEvent.InputTuple,
      GameMasterChangedEvent.OutputTuple,
      GameMasterChangedEvent.OutputObject
    >;

    "GameStarted(uint256,uint256)": TypedContractEvent<
      GameStartedEvent.InputTuple,
      GameStartedEvent.OutputTuple,
      GameStartedEvent.OutputObject
    >;
    GameStarted: TypedContractEvent<
      GameStartedEvent.InputTuple,
      GameStartedEvent.OutputTuple,
      GameStartedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PlayerEliminated(uint256,address,uint256)": TypedContractEvent<
      PlayerEliminatedEvent.InputTuple,
      PlayerEliminatedEvent.OutputTuple,
      PlayerEliminatedEvent.OutputObject
    >;
    PlayerEliminated: TypedContractEvent<
      PlayerEliminatedEvent.InputTuple,
      PlayerEliminatedEvent.OutputTuple,
      PlayerEliminatedEvent.OutputObject
    >;

    "PlayerSwitchedTeam(uint256,address,uint8,uint8)": TypedContractEvent<
      PlayerSwitchedTeamEvent.InputTuple,
      PlayerSwitchedTeamEvent.OutputTuple,
      PlayerSwitchedTeamEvent.OutputObject
    >;
    PlayerSwitchedTeam: TypedContractEvent<
      PlayerSwitchedTeamEvent.InputTuple,
      PlayerSwitchedTeamEvent.OutputTuple,
      PlayerSwitchedTeamEvent.OutputObject
    >;

    "TeamEliminated(uint256,uint8,uint256)": TypedContractEvent<
      TeamEliminatedEvent.InputTuple,
      TeamEliminatedEvent.OutputTuple,
      TeamEliminatedEvent.OutputObject
    >;
    TeamEliminated: TypedContractEvent<
      TeamEliminatedEvent.InputTuple,
      TeamEliminatedEvent.OutputTuple,
      TeamEliminatedEvent.OutputObject
    >;
  };
}
