/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export type GameInstanceInfoStruct = {
  gameId: BigNumberish;
  state: BigNumberish;
  currentRound: BigNumberish;
  activePlayerCount: BigNumberish;
};

export type GameInstanceInfoStructOutput = [
  gameId: bigint,
  state: bigint,
  currentRound: bigint,
  activePlayerCount: bigint
] & {
  gameId: bigint;
  state: bigint;
  currentRound: bigint;
  activePlayerCount: bigint;
};

export declare namespace IGame {
  export type GameInfoStruct = {
    state: BigNumberish;
    currentRound: BigNumberish;
    roundEndTime: BigNumberish;
    gameStartTime: BigNumberish;
    gameEndTime: BigNumberish;
  };

  export type GameInfoStructOutput = [
    state: bigint,
    currentRound: bigint,
    roundEndTime: bigint,
    gameStartTime: bigint,
    gameEndTime: bigint
  ] & {
    state: bigint;
    currentRound: bigint;
    roundEndTime: bigint;
    gameStartTime: bigint;
    gameEndTime: bigint;
  };
}

export declare namespace Bidding {
  export type BiddingPlayerInfoStruct = {
    playerAddress: AddressLike;
    playerNumber: BigNumberish;
    points: BigNumberish;
    hasCommitted: boolean;
    hasRevealed: boolean;
    isActive: boolean;
  };

  export type BiddingPlayerInfoStructOutput = [
    playerAddress: string,
    playerNumber: bigint,
    points: bigint,
    hasCommitted: boolean,
    hasRevealed: boolean,
    isActive: boolean
  ] & {
    playerAddress: string;
    playerNumber: bigint;
    points: bigint;
    hasCommitted: boolean;
    hasRevealed: boolean;
    isActive: boolean;
  };
}

export interface BiddingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "commitBid"
      | "endExpiredGames"
      | "endGame"
      | "gameIdCounter"
      | "gameMaster"
      | "getActivePlayers"
      | "getCurrentPhase"
      | "getGameInfo"
      | "getGameName"
      | "getGameState"
      | "getGames"
      | "getPlayerGameId"
      | "getPlayerInfo"
      | "getPlayerNumber"
      | "getPlayerPoints"
      | "getPlayers"
      | "getRoundEndTime"
      | "hasPlayerCommitted"
      | "hasPlayerRevealed"
      | "initialize"
      | "isPlayerInGame"
      | "owner"
      | "playerGameId"
      | "registerMe"
      | "renounceOwnership"
      | "revealBid"
      | "setGameMaster"
      | "startGames"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "GameCompleted"
      | "GameInitialized"
      | "GameMasterChanged"
      | "OwnershipTransferred"
      | "PlayerCommitted"
      | "PlayerEliminated"
      | "PlayerRevealed"
      | "PointsDeducted"
      | "RoundStarted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "commitBid",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "endExpiredGames",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "endGame", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "gameIdCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gameMaster",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getActivePlayers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentPhase",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGameInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGameName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGameState",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getGames", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPlayerGameId",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerNumber",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerPoints",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoundEndTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasPlayerCommitted",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasPlayerRevealed",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "isPlayerInGame",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "playerGameId",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerMe",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revealBid",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setGameMaster",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "startGames",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "commitBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "endExpiredGames",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "gameIdCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gameMaster", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getActivePlayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGameInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGameName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGameState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getGames", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerGameId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPlayers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoundEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasPlayerCommitted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasPlayerRevealed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isPlayerInGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "playerGameId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registerMe", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revealBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setGameMaster",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startGames", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace GameCompletedEvent {
  export type InputTuple = [gameId: BigNumberish, winners: AddressLike[]];
  export type OutputTuple = [gameId: bigint, winners: string[]];
  export interface OutputObject {
    gameId: bigint;
    winners: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameInitializedEvent {
  export type InputTuple = [
    players: AddressLike[],
    playerNumbers: BigNumberish[]
  ];
  export type OutputTuple = [players: string[], playerNumbers: bigint[]];
  export interface OutputObject {
    players: string[];
    playerNumbers: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameMasterChangedEvent {
  export type InputTuple = [newGameMaster: AddressLike];
  export type OutputTuple = [newGameMaster: string];
  export interface OutputObject {
    newGameMaster: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlayerCommittedEvent {
  export type InputTuple = [gameId: BigNumberish, player: AddressLike];
  export type OutputTuple = [gameId: bigint, player: string];
  export interface OutputObject {
    gameId: bigint;
    player: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlayerEliminatedEvent {
  export type InputTuple = [
    gameId: BigNumberish,
    player: AddressLike,
    playerNumber: BigNumberish
  ];
  export type OutputTuple = [
    gameId: bigint,
    player: string,
    playerNumber: bigint
  ];
  export interface OutputObject {
    gameId: bigint;
    player: string;
    playerNumber: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlayerRevealedEvent {
  export type InputTuple = [
    gameId: BigNumberish,
    player: AddressLike,
    bid: BigNumberish
  ];
  export type OutputTuple = [gameId: bigint, player: string, bid: bigint];
  export interface OutputObject {
    gameId: bigint;
    player: string;
    bid: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PointsDeductedEvent {
  export type InputTuple = [
    gameId: BigNumberish,
    player: AddressLike,
    bid: BigNumberish,
    remainingPoints: BigNumberish
  ];
  export type OutputTuple = [
    gameId: bigint,
    player: string,
    bid: bigint,
    remainingPoints: bigint
  ];
  export interface OutputObject {
    gameId: bigint;
    player: string;
    bid: bigint;
    remainingPoints: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoundStartedEvent {
  export type InputTuple = [
    gameId: BigNumberish,
    roundNumber: BigNumberish,
    phase: BigNumberish,
    endTime: BigNumberish
  ];
  export type OutputTuple = [
    gameId: bigint,
    roundNumber: bigint,
    phase: bigint,
    endTime: bigint
  ];
  export interface OutputObject {
    gameId: bigint;
    roundNumber: bigint;
    phase: bigint;
    endTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Bidding extends BaseContract {
  connect(runner?: ContractRunner | null): Bidding;
  waitForDeployment(): Promise<this>;

  interface: BiddingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  commitBid: TypedContractMethod<[commitment: BytesLike], [void], "nonpayable">;

  endExpiredGames: TypedContractMethod<[], [void], "nonpayable">;

  endGame: TypedContractMethod<[], [string[]], "nonpayable">;

  gameIdCounter: TypedContractMethod<[], [bigint], "view">;

  gameMaster: TypedContractMethod<[], [string], "view">;

  getActivePlayers: TypedContractMethod<[], [string[]], "view">;

  getCurrentPhase: TypedContractMethod<
    [gameId: BigNumberish],
    [bigint],
    "view"
  >;

  getGameInfo: TypedContractMethod<
    [gameId: BigNumberish],
    [IGame.GameInfoStructOutput],
    "view"
  >;

  getGameName: TypedContractMethod<[], [string], "view">;

  getGameState: TypedContractMethod<[gameId: BigNumberish], [bigint], "view">;

  getGames: TypedContractMethod<[], [GameInstanceInfoStructOutput[]], "view">;

  getPlayerGameId: TypedContractMethod<[player: AddressLike], [bigint], "view">;

  getPlayerInfo: TypedContractMethod<
    [gameId: BigNumberish],
    [Bidding.BiddingPlayerInfoStructOutput[]],
    "view"
  >;

  getPlayerNumber: TypedContractMethod<
    [gameId: BigNumberish, player: AddressLike],
    [bigint],
    "view"
  >;

  getPlayerPoints: TypedContractMethod<
    [gameId: BigNumberish, player: AddressLike],
    [bigint],
    "view"
  >;

  getPlayers: TypedContractMethod<[], [string[]], "view">;

  getRoundEndTime: TypedContractMethod<
    [gameId: BigNumberish],
    [bigint],
    "view"
  >;

  hasPlayerCommitted: TypedContractMethod<
    [gameId: BigNumberish, player: AddressLike],
    [boolean],
    "view"
  >;

  hasPlayerRevealed: TypedContractMethod<
    [gameId: BigNumberish, player: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<
    [_players: AddressLike[], _playerNumbers: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  isPlayerInGame: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  playerGameId: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  registerMe: TypedContractMethod<[], [void], "nonpayable">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  revealBid: TypedContractMethod<
    [bid: BigNumberish, salt: BytesLike],
    [void],
    "nonpayable"
  >;

  setGameMaster: TypedContractMethod<
    [_newGameMaster: AddressLike],
    [void],
    "nonpayable"
  >;

  startGames: TypedContractMethod<[], [boolean], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "commitBid"
  ): TypedContractMethod<[commitment: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "endExpiredGames"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "endGame"
  ): TypedContractMethod<[], [string[]], "nonpayable">;
  getFunction(
    nameOrSignature: "gameIdCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "gameMaster"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getActivePlayers"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getCurrentPhase"
  ): TypedContractMethod<[gameId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getGameInfo"
  ): TypedContractMethod<
    [gameId: BigNumberish],
    [IGame.GameInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getGameName"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getGameState"
  ): TypedContractMethod<[gameId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getGames"
  ): TypedContractMethod<[], [GameInstanceInfoStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getPlayerGameId"
  ): TypedContractMethod<[player: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPlayerInfo"
  ): TypedContractMethod<
    [gameId: BigNumberish],
    [Bidding.BiddingPlayerInfoStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPlayerNumber"
  ): TypedContractMethod<
    [gameId: BigNumberish, player: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPlayerPoints"
  ): TypedContractMethod<
    [gameId: BigNumberish, player: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPlayers"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getRoundEndTime"
  ): TypedContractMethod<[gameId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "hasPlayerCommitted"
  ): TypedContractMethod<
    [gameId: BigNumberish, player: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasPlayerRevealed"
  ): TypedContractMethod<
    [gameId: BigNumberish, player: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [_players: AddressLike[], _playerNumbers: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isPlayerInGame"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "playerGameId"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "registerMe"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revealBid"
  ): TypedContractMethod<
    [bid: BigNumberish, salt: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setGameMaster"
  ): TypedContractMethod<[_newGameMaster: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "startGames"
  ): TypedContractMethod<[], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "GameCompleted"
  ): TypedContractEvent<
    GameCompletedEvent.InputTuple,
    GameCompletedEvent.OutputTuple,
    GameCompletedEvent.OutputObject
  >;
  getEvent(
    key: "GameInitialized"
  ): TypedContractEvent<
    GameInitializedEvent.InputTuple,
    GameInitializedEvent.OutputTuple,
    GameInitializedEvent.OutputObject
  >;
  getEvent(
    key: "GameMasterChanged"
  ): TypedContractEvent<
    GameMasterChangedEvent.InputTuple,
    GameMasterChangedEvent.OutputTuple,
    GameMasterChangedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PlayerCommitted"
  ): TypedContractEvent<
    PlayerCommittedEvent.InputTuple,
    PlayerCommittedEvent.OutputTuple,
    PlayerCommittedEvent.OutputObject
  >;
  getEvent(
    key: "PlayerEliminated"
  ): TypedContractEvent<
    PlayerEliminatedEvent.InputTuple,
    PlayerEliminatedEvent.OutputTuple,
    PlayerEliminatedEvent.OutputObject
  >;
  getEvent(
    key: "PlayerRevealed"
  ): TypedContractEvent<
    PlayerRevealedEvent.InputTuple,
    PlayerRevealedEvent.OutputTuple,
    PlayerRevealedEvent.OutputObject
  >;
  getEvent(
    key: "PointsDeducted"
  ): TypedContractEvent<
    PointsDeductedEvent.InputTuple,
    PointsDeductedEvent.OutputTuple,
    PointsDeductedEvent.OutputObject
  >;
  getEvent(
    key: "RoundStarted"
  ): TypedContractEvent<
    RoundStartedEvent.InputTuple,
    RoundStartedEvent.OutputTuple,
    RoundStartedEvent.OutputObject
  >;

  filters: {
    "GameCompleted(uint256,address[])": TypedContractEvent<
      GameCompletedEvent.InputTuple,
      GameCompletedEvent.OutputTuple,
      GameCompletedEvent.OutputObject
    >;
    GameCompleted: TypedContractEvent<
      GameCompletedEvent.InputTuple,
      GameCompletedEvent.OutputTuple,
      GameCompletedEvent.OutputObject
    >;

    "GameInitialized(address[],uint256[])": TypedContractEvent<
      GameInitializedEvent.InputTuple,
      GameInitializedEvent.OutputTuple,
      GameInitializedEvent.OutputObject
    >;
    GameInitialized: TypedContractEvent<
      GameInitializedEvent.InputTuple,
      GameInitializedEvent.OutputTuple,
      GameInitializedEvent.OutputObject
    >;

    "GameMasterChanged(address)": TypedContractEvent<
      GameMasterChangedEvent.InputTuple,
      GameMasterChangedEvent.OutputTuple,
      GameMasterChangedEvent.OutputObject
    >;
    GameMasterChanged: TypedContractEvent<
      GameMasterChangedEvent.InputTuple,
      GameMasterChangedEvent.OutputTuple,
      GameMasterChangedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PlayerCommitted(uint256,address)": TypedContractEvent<
      PlayerCommittedEvent.InputTuple,
      PlayerCommittedEvent.OutputTuple,
      PlayerCommittedEvent.OutputObject
    >;
    PlayerCommitted: TypedContractEvent<
      PlayerCommittedEvent.InputTuple,
      PlayerCommittedEvent.OutputTuple,
      PlayerCommittedEvent.OutputObject
    >;

    "PlayerEliminated(uint256,address,uint256)": TypedContractEvent<
      PlayerEliminatedEvent.InputTuple,
      PlayerEliminatedEvent.OutputTuple,
      PlayerEliminatedEvent.OutputObject
    >;
    PlayerEliminated: TypedContractEvent<
      PlayerEliminatedEvent.InputTuple,
      PlayerEliminatedEvent.OutputTuple,
      PlayerEliminatedEvent.OutputObject
    >;

    "PlayerRevealed(uint256,address,uint256)": TypedContractEvent<
      PlayerRevealedEvent.InputTuple,
      PlayerRevealedEvent.OutputTuple,
      PlayerRevealedEvent.OutputObject
    >;
    PlayerRevealed: TypedContractEvent<
      PlayerRevealedEvent.InputTuple,
      PlayerRevealedEvent.OutputTuple,
      PlayerRevealedEvent.OutputObject
    >;

    "PointsDeducted(uint256,address,uint256,uint256)": TypedContractEvent<
      PointsDeductedEvent.InputTuple,
      PointsDeductedEvent.OutputTuple,
      PointsDeductedEvent.OutputObject
    >;
    PointsDeducted: TypedContractEvent<
      PointsDeductedEvent.InputTuple,
      PointsDeductedEvent.OutputTuple,
      PointsDeductedEvent.OutputObject
    >;

    "RoundStarted(uint256,uint256,uint256,uint256)": TypedContractEvent<
      RoundStartedEvent.InputTuple,
      RoundStartedEvent.OutputTuple,
      RoundStartedEvent.OutputObject
    >;
    RoundStarted: TypedContractEvent<
      RoundStartedEvent.InputTuple,
      RoundStartedEvent.OutputTuple,
      RoundStartedEvent.OutputObject
    >;
  };
}
