/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface GameMasterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "activeGameCount"
      | "activeGames"
      | "endExpiredGames"
      | "gameAddresses"
      | "getPlayerCount"
      | "getPlayerInfo"
      | "getPlayerNumber"
      | "getPlayers"
      | "getRegisteredGames"
      | "initializeGame"
      | "isGameRegistered"
      | "isRegistered"
      | "owner"
      | "playerNumbers"
      | "players"
      | "ragnarokAddress"
      | "registerGame"
      | "registerPlayers"
      | "registeredGames"
      | "renounceOwnership"
      | "setRagnarokAddress"
      | "startGames"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "GameRegistered"
      | "GameStarted"
      | "OwnershipTransferred"
      | "PlayerNumberAssigned"
      | "PlayersRegistered"
      | "RagnarokAddressUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "activeGameCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activeGames",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "endExpiredGames",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "gameAddresses",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerNumber",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRegisteredGames",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initializeGame",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isGameRegistered",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegistered",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "playerNumbers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "players",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ragnarokAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerGame",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerPlayers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registeredGames",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setRagnarokAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "startGames", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "activeGameCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activeGames",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endExpiredGames",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gameAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPlayers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRegisteredGames",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isGameRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "playerNumbers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "players", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ragnarokAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerPlayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registeredGames",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRagnarokAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startGames", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace GameRegisteredEvent {
  export type InputTuple = [gameName: string, gameAddress: AddressLike];
  export type OutputTuple = [gameName: string, gameAddress: string];
  export interface OutputObject {
    gameName: string;
    gameAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameStartedEvent {
  export type InputTuple = [
    gameName: string,
    gameAddress: AddressLike,
    gameId: BigNumberish
  ];
  export type OutputTuple = [
    gameName: string,
    gameAddress: string,
    gameId: bigint
  ];
  export interface OutputObject {
    gameName: string;
    gameAddress: string;
    gameId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlayerNumberAssignedEvent {
  export type InputTuple = [player: AddressLike, number: BigNumberish];
  export type OutputTuple = [player: string, number: bigint];
  export interface OutputObject {
    player: string;
    number: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlayersRegisteredEvent {
  export type InputTuple = [players: AddressLike[]];
  export type OutputTuple = [players: string[]];
  export interface OutputObject {
    players: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RagnarokAddressUpdatedEvent {
  export type InputTuple = [newAddress: AddressLike];
  export type OutputTuple = [newAddress: string];
  export interface OutputObject {
    newAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface GameMaster extends BaseContract {
  connect(runner?: ContractRunner | null): GameMaster;
  waitForDeployment(): Promise<this>;

  interface: GameMasterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  activeGameCount: TypedContractMethod<[], [bigint], "view">;

  activeGames: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  endExpiredGames: TypedContractMethod<
    [gameName: string],
    [void],
    "nonpayable"
  >;

  gameAddresses: TypedContractMethod<[arg0: string], [string], "view">;

  getPlayerCount: TypedContractMethod<[], [bigint], "view">;

  getPlayerInfo: TypedContractMethod<
    [player: AddressLike],
    [[string, bigint] & { gameName: string; gameId: bigint }],
    "view"
  >;

  getPlayerNumber: TypedContractMethod<[player: AddressLike], [bigint], "view">;

  getPlayers: TypedContractMethod<[], [string[]], "view">;

  getRegisteredGames: TypedContractMethod<[], [string[]], "view">;

  initializeGame: TypedContractMethod<
    [gameName: string],
    [bigint],
    "nonpayable"
  >;

  isGameRegistered: TypedContractMethod<[arg0: string], [boolean], "view">;

  isRegistered: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  playerNumbers: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  players: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  ragnarokAddress: TypedContractMethod<[], [string], "view">;

  registerGame: TypedContractMethod<
    [gameName: string, gameAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  registerPlayers: TypedContractMethod<[], [void], "nonpayable">;

  registeredGames: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setRagnarokAddress: TypedContractMethod<
    [_ragnarok: AddressLike],
    [void],
    "nonpayable"
  >;

  startGames: TypedContractMethod<[gameName: string], [boolean], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "activeGameCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "activeGames"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "endExpiredGames"
  ): TypedContractMethod<[gameName: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "gameAddresses"
  ): TypedContractMethod<[arg0: string], [string], "view">;
  getFunction(
    nameOrSignature: "getPlayerCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPlayerInfo"
  ): TypedContractMethod<
    [player: AddressLike],
    [[string, bigint] & { gameName: string; gameId: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPlayerNumber"
  ): TypedContractMethod<[player: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPlayers"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getRegisteredGames"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "initializeGame"
  ): TypedContractMethod<[gameName: string], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "isGameRegistered"
  ): TypedContractMethod<[arg0: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "isRegistered"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "playerNumbers"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "players"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "ragnarokAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registerGame"
  ): TypedContractMethod<
    [gameName: string, gameAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerPlayers"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "registeredGames"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRagnarokAddress"
  ): TypedContractMethod<[_ragnarok: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "startGames"
  ): TypedContractMethod<[gameName: string], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "GameRegistered"
  ): TypedContractEvent<
    GameRegisteredEvent.InputTuple,
    GameRegisteredEvent.OutputTuple,
    GameRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "GameStarted"
  ): TypedContractEvent<
    GameStartedEvent.InputTuple,
    GameStartedEvent.OutputTuple,
    GameStartedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PlayerNumberAssigned"
  ): TypedContractEvent<
    PlayerNumberAssignedEvent.InputTuple,
    PlayerNumberAssignedEvent.OutputTuple,
    PlayerNumberAssignedEvent.OutputObject
  >;
  getEvent(
    key: "PlayersRegistered"
  ): TypedContractEvent<
    PlayersRegisteredEvent.InputTuple,
    PlayersRegisteredEvent.OutputTuple,
    PlayersRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "RagnarokAddressUpdated"
  ): TypedContractEvent<
    RagnarokAddressUpdatedEvent.InputTuple,
    RagnarokAddressUpdatedEvent.OutputTuple,
    RagnarokAddressUpdatedEvent.OutputObject
  >;

  filters: {
    "GameRegistered(string,address)": TypedContractEvent<
      GameRegisteredEvent.InputTuple,
      GameRegisteredEvent.OutputTuple,
      GameRegisteredEvent.OutputObject
    >;
    GameRegistered: TypedContractEvent<
      GameRegisteredEvent.InputTuple,
      GameRegisteredEvent.OutputTuple,
      GameRegisteredEvent.OutputObject
    >;

    "GameStarted(string,address,uint256)": TypedContractEvent<
      GameStartedEvent.InputTuple,
      GameStartedEvent.OutputTuple,
      GameStartedEvent.OutputObject
    >;
    GameStarted: TypedContractEvent<
      GameStartedEvent.InputTuple,
      GameStartedEvent.OutputTuple,
      GameStartedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PlayerNumberAssigned(address,uint256)": TypedContractEvent<
      PlayerNumberAssignedEvent.InputTuple,
      PlayerNumberAssignedEvent.OutputTuple,
      PlayerNumberAssignedEvent.OutputObject
    >;
    PlayerNumberAssigned: TypedContractEvent<
      PlayerNumberAssignedEvent.InputTuple,
      PlayerNumberAssignedEvent.OutputTuple,
      PlayerNumberAssignedEvent.OutputObject
    >;

    "PlayersRegistered(address[])": TypedContractEvent<
      PlayersRegisteredEvent.InputTuple,
      PlayersRegisteredEvent.OutputTuple,
      PlayersRegisteredEvent.OutputObject
    >;
    PlayersRegistered: TypedContractEvent<
      PlayersRegisteredEvent.InputTuple,
      PlayersRegisteredEvent.OutputTuple,
      PlayersRegisteredEvent.OutputObject
    >;

    "RagnarokAddressUpdated(address)": TypedContractEvent<
      RagnarokAddressUpdatedEvent.InputTuple,
      RagnarokAddressUpdatedEvent.OutputTuple,
      RagnarokAddressUpdatedEvent.OutputObject
    >;
    RagnarokAddressUpdated: TypedContractEvent<
      RagnarokAddressUpdatedEvent.InputTuple,
      RagnarokAddressUpdatedEvent.OutputTuple,
      RagnarokAddressUpdatedEvent.OutputObject
    >;
  };
}
