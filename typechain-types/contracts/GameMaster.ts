/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export type GameInstanceInfoStruct = {
  gameId: BigNumberish;
  state: BigNumberish;
  currentRound: BigNumberish;
  activePlayerCount: BigNumberish;
};

export type GameInstanceInfoStructOutput = [
  gameId: bigint,
  state: bigint,
  currentRound: bigint,
  activePlayerCount: bigint
] & {
  gameId: bigint;
  state: bigint;
  currentRound: bigint;
  activePlayerCount: bigint;
};

export interface GameMasterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_PLAYERS"
      | "activePlayers"
      | "closeRegistration"
      | "eliminatedPlayers"
      | "endExpiredGames"
      | "endGames"
      | "finalPlacements"
      | "gameAddresses"
      | "getActivePlayerCount"
      | "getActivePlayers"
      | "getActivePlayersAndNumbers"
      | "getEliminatedPlayerCount"
      | "getEliminatedPlayers"
      | "getGames"
      | "getPlayerCount"
      | "getPlayerFinalPlacement"
      | "getPlayerInfo"
      | "getPlayerNumber"
      | "getRegisteredGames"
      | "getRegisteredPlayers"
      | "initializeGame"
      | "isActivePlayer"
      | "isGameRegistered"
      | "isRegistered"
      | "owner"
      | "playerEliminated"
      | "playerNumbers"
      | "register"
      | "registerGame"
      | "registeredGames"
      | "registeredPlayers"
      | "registrationClosed"
      | "registrationFee"
      | "renounceOwnership"
      | "resetGame"
      | "setRegistrationFee"
      | "startGames"
      | "transferOwnership"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "GameRegistered"
      | "GameReset"
      | "GameStarted"
      | "OwnershipTransferred"
      | "PlayerEliminated"
      | "PlayerNumberAssigned"
      | "PlayerRefunded"
      | "PlayerRegistered"
      | "PlayersRegistered"
      | "RefundFailed"
      | "RegistrationClosed"
      | "RegistrationFeeChanged"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_PLAYERS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activePlayers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "closeRegistration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "eliminatedPlayers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "endExpiredGames",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "endGames", values: [string]): string;
  encodeFunctionData(
    functionFragment: "finalPlacements",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "gameAddresses",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getActivePlayerCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getActivePlayers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getActivePlayersAndNumbers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEliminatedPlayerCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEliminatedPlayers",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getGames", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPlayerCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerFinalPlacement",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerNumber",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRegisteredGames",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRegisteredPlayers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initializeGame",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isActivePlayer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isGameRegistered",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegistered",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "playerEliminated",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "playerNumbers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "register", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerGame",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registeredGames",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registeredPlayers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registrationClosed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registrationFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "resetGame", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setRegistrationFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "startGames", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "MAX_PLAYERS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activePlayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeRegistration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eliminatedPlayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endExpiredGames",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endGames", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finalPlacements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gameAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActivePlayerCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActivePlayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActivePlayersAndNumbers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEliminatedPlayerCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEliminatedPlayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getGames", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerFinalPlacement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegisteredGames",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegisteredPlayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isActivePlayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isGameRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "playerEliminated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "playerNumbers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registeredGames",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registeredPlayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registrationClosed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registrationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resetGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRegistrationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startGames", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace GameRegisteredEvent {
  export type InputTuple = [gameName: string, gameAddress: AddressLike];
  export type OutputTuple = [gameName: string, gameAddress: string];
  export interface OutputObject {
    gameName: string;
    gameAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameResetEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameStartedEvent {
  export type InputTuple = [
    gameName: string,
    gameAddress: AddressLike,
    gameId: BigNumberish
  ];
  export type OutputTuple = [
    gameName: string,
    gameAddress: string,
    gameId: bigint
  ];
  export interface OutputObject {
    gameName: string;
    gameAddress: string;
    gameId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlayerEliminatedEvent {
  export type InputTuple = [player: AddressLike, playerNumber: BigNumberish];
  export type OutputTuple = [player: string, playerNumber: bigint];
  export interface OutputObject {
    player: string;
    playerNumber: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlayerNumberAssignedEvent {
  export type InputTuple = [player: AddressLike, number: BigNumberish];
  export type OutputTuple = [player: string, number: bigint];
  export interface OutputObject {
    player: string;
    number: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlayerRefundedEvent {
  export type InputTuple = [player: AddressLike, amount: BigNumberish];
  export type OutputTuple = [player: string, amount: bigint];
  export interface OutputObject {
    player: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlayerRegisteredEvent {
  export type InputTuple = [player: AddressLike, playerNumber: BigNumberish];
  export type OutputTuple = [player: string, playerNumber: bigint];
  export interface OutputObject {
    player: string;
    playerNumber: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlayersRegisteredEvent {
  export type InputTuple = [players: AddressLike[]];
  export type OutputTuple = [players: string[]];
  export interface OutputObject {
    players: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RefundFailedEvent {
  export type InputTuple = [player: AddressLike, amount: BigNumberish];
  export type OutputTuple = [player: string, amount: bigint];
  export interface OutputObject {
    player: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RegistrationClosedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RegistrationFeeChangedEvent {
  export type InputTuple = [newFee: BigNumberish];
  export type OutputTuple = [newFee: bigint];
  export interface OutputObject {
    newFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface GameMaster extends BaseContract {
  connect(runner?: ContractRunner | null): GameMaster;
  waitForDeployment(): Promise<this>;

  interface: GameMasterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_PLAYERS: TypedContractMethod<[], [bigint], "view">;

  activePlayers: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  closeRegistration: TypedContractMethod<[], [void], "nonpayable">;

  eliminatedPlayers: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  endExpiredGames: TypedContractMethod<
    [gameName: string],
    [void],
    "nonpayable"
  >;

  endGames: TypedContractMethod<[gameName: string], [string[]], "nonpayable">;

  finalPlacements: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  gameAddresses: TypedContractMethod<[arg0: string], [string], "view">;

  getActivePlayerCount: TypedContractMethod<[], [bigint], "view">;

  getActivePlayers: TypedContractMethod<[], [string[]], "view">;

  getActivePlayersAndNumbers: TypedContractMethod<
    [],
    [[string[], bigint[]] & { players: string[]; numbers: bigint[] }],
    "view"
  >;

  getEliminatedPlayerCount: TypedContractMethod<[], [bigint], "view">;

  getEliminatedPlayers: TypedContractMethod<[], [string[]], "view">;

  getGames: TypedContractMethod<
    [],
    [
      [string[], GameInstanceInfoStructOutput[][]] & {
        gameTypes: string[];
        gameInstances: GameInstanceInfoStructOutput[][];
      }
    ],
    "view"
  >;

  getPlayerCount: TypedContractMethod<[], [bigint], "view">;

  getPlayerFinalPlacement: TypedContractMethod<
    [player: AddressLike],
    [bigint],
    "view"
  >;

  getPlayerInfo: TypedContractMethod<
    [player: AddressLike],
    [
      [string, bigint, boolean, bigint, bigint] & {
        gameName: string;
        gameId: bigint;
        isActive: boolean;
        gameState: bigint;
        playerNumber: bigint;
      }
    ],
    "view"
  >;

  getPlayerNumber: TypedContractMethod<[player: AddressLike], [bigint], "view">;

  getRegisteredGames: TypedContractMethod<[], [string[]], "view">;

  getRegisteredPlayers: TypedContractMethod<[], [string[]], "view">;

  initializeGame: TypedContractMethod<
    [gameName: string],
    [bigint],
    "nonpayable"
  >;

  isActivePlayer: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  isGameRegistered: TypedContractMethod<[arg0: string], [boolean], "view">;

  isRegistered: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  playerEliminated: TypedContractMethod<
    [player: AddressLike],
    [void],
    "nonpayable"
  >;

  playerNumbers: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  register: TypedContractMethod<[], [void], "payable">;

  registerGame: TypedContractMethod<
    [gameName: string, gameAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  registeredGames: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  registeredPlayers: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  registrationClosed: TypedContractMethod<[], [boolean], "view">;

  registrationFee: TypedContractMethod<[], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  resetGame: TypedContractMethod<[], [void], "nonpayable">;

  setRegistrationFee: TypedContractMethod<
    [_newFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  startGames: TypedContractMethod<[gameName: string], [boolean], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_PLAYERS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "activePlayers"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "closeRegistration"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "eliminatedPlayers"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "endExpiredGames"
  ): TypedContractMethod<[gameName: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "endGames"
  ): TypedContractMethod<[gameName: string], [string[]], "nonpayable">;
  getFunction(
    nameOrSignature: "finalPlacements"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "gameAddresses"
  ): TypedContractMethod<[arg0: string], [string], "view">;
  getFunction(
    nameOrSignature: "getActivePlayerCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getActivePlayers"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getActivePlayersAndNumbers"
  ): TypedContractMethod<
    [],
    [[string[], bigint[]] & { players: string[]; numbers: bigint[] }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEliminatedPlayerCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getEliminatedPlayers"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getGames"
  ): TypedContractMethod<
    [],
    [
      [string[], GameInstanceInfoStructOutput[][]] & {
        gameTypes: string[];
        gameInstances: GameInstanceInfoStructOutput[][];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPlayerCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPlayerFinalPlacement"
  ): TypedContractMethod<[player: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPlayerInfo"
  ): TypedContractMethod<
    [player: AddressLike],
    [
      [string, bigint, boolean, bigint, bigint] & {
        gameName: string;
        gameId: bigint;
        isActive: boolean;
        gameState: bigint;
        playerNumber: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPlayerNumber"
  ): TypedContractMethod<[player: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRegisteredGames"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getRegisteredPlayers"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "initializeGame"
  ): TypedContractMethod<[gameName: string], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "isActivePlayer"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isGameRegistered"
  ): TypedContractMethod<[arg0: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "isRegistered"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "playerEliminated"
  ): TypedContractMethod<[player: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "playerNumbers"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "register"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "registerGame"
  ): TypedContractMethod<
    [gameName: string, gameAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registeredGames"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "registeredPlayers"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "registrationClosed"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "registrationFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resetGame"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRegistrationFee"
  ): TypedContractMethod<[_newFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "startGames"
  ): TypedContractMethod<[gameName: string], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "GameRegistered"
  ): TypedContractEvent<
    GameRegisteredEvent.InputTuple,
    GameRegisteredEvent.OutputTuple,
    GameRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "GameReset"
  ): TypedContractEvent<
    GameResetEvent.InputTuple,
    GameResetEvent.OutputTuple,
    GameResetEvent.OutputObject
  >;
  getEvent(
    key: "GameStarted"
  ): TypedContractEvent<
    GameStartedEvent.InputTuple,
    GameStartedEvent.OutputTuple,
    GameStartedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PlayerEliminated"
  ): TypedContractEvent<
    PlayerEliminatedEvent.InputTuple,
    PlayerEliminatedEvent.OutputTuple,
    PlayerEliminatedEvent.OutputObject
  >;
  getEvent(
    key: "PlayerNumberAssigned"
  ): TypedContractEvent<
    PlayerNumberAssignedEvent.InputTuple,
    PlayerNumberAssignedEvent.OutputTuple,
    PlayerNumberAssignedEvent.OutputObject
  >;
  getEvent(
    key: "PlayerRefunded"
  ): TypedContractEvent<
    PlayerRefundedEvent.InputTuple,
    PlayerRefundedEvent.OutputTuple,
    PlayerRefundedEvent.OutputObject
  >;
  getEvent(
    key: "PlayerRegistered"
  ): TypedContractEvent<
    PlayerRegisteredEvent.InputTuple,
    PlayerRegisteredEvent.OutputTuple,
    PlayerRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "PlayersRegistered"
  ): TypedContractEvent<
    PlayersRegisteredEvent.InputTuple,
    PlayersRegisteredEvent.OutputTuple,
    PlayersRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "RefundFailed"
  ): TypedContractEvent<
    RefundFailedEvent.InputTuple,
    RefundFailedEvent.OutputTuple,
    RefundFailedEvent.OutputObject
  >;
  getEvent(
    key: "RegistrationClosed"
  ): TypedContractEvent<
    RegistrationClosedEvent.InputTuple,
    RegistrationClosedEvent.OutputTuple,
    RegistrationClosedEvent.OutputObject
  >;
  getEvent(
    key: "RegistrationFeeChanged"
  ): TypedContractEvent<
    RegistrationFeeChangedEvent.InputTuple,
    RegistrationFeeChangedEvent.OutputTuple,
    RegistrationFeeChangedEvent.OutputObject
  >;

  filters: {
    "GameRegistered(string,address)": TypedContractEvent<
      GameRegisteredEvent.InputTuple,
      GameRegisteredEvent.OutputTuple,
      GameRegisteredEvent.OutputObject
    >;
    GameRegistered: TypedContractEvent<
      GameRegisteredEvent.InputTuple,
      GameRegisteredEvent.OutputTuple,
      GameRegisteredEvent.OutputObject
    >;

    "GameReset()": TypedContractEvent<
      GameResetEvent.InputTuple,
      GameResetEvent.OutputTuple,
      GameResetEvent.OutputObject
    >;
    GameReset: TypedContractEvent<
      GameResetEvent.InputTuple,
      GameResetEvent.OutputTuple,
      GameResetEvent.OutputObject
    >;

    "GameStarted(string,address,uint256)": TypedContractEvent<
      GameStartedEvent.InputTuple,
      GameStartedEvent.OutputTuple,
      GameStartedEvent.OutputObject
    >;
    GameStarted: TypedContractEvent<
      GameStartedEvent.InputTuple,
      GameStartedEvent.OutputTuple,
      GameStartedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PlayerEliminated(address,uint256)": TypedContractEvent<
      PlayerEliminatedEvent.InputTuple,
      PlayerEliminatedEvent.OutputTuple,
      PlayerEliminatedEvent.OutputObject
    >;
    PlayerEliminated: TypedContractEvent<
      PlayerEliminatedEvent.InputTuple,
      PlayerEliminatedEvent.OutputTuple,
      PlayerEliminatedEvent.OutputObject
    >;

    "PlayerNumberAssigned(address,uint256)": TypedContractEvent<
      PlayerNumberAssignedEvent.InputTuple,
      PlayerNumberAssignedEvent.OutputTuple,
      PlayerNumberAssignedEvent.OutputObject
    >;
    PlayerNumberAssigned: TypedContractEvent<
      PlayerNumberAssignedEvent.InputTuple,
      PlayerNumberAssignedEvent.OutputTuple,
      PlayerNumberAssignedEvent.OutputObject
    >;

    "PlayerRefunded(address,uint256)": TypedContractEvent<
      PlayerRefundedEvent.InputTuple,
      PlayerRefundedEvent.OutputTuple,
      PlayerRefundedEvent.OutputObject
    >;
    PlayerRefunded: TypedContractEvent<
      PlayerRefundedEvent.InputTuple,
      PlayerRefundedEvent.OutputTuple,
      PlayerRefundedEvent.OutputObject
    >;

    "PlayerRegistered(address,uint256)": TypedContractEvent<
      PlayerRegisteredEvent.InputTuple,
      PlayerRegisteredEvent.OutputTuple,
      PlayerRegisteredEvent.OutputObject
    >;
    PlayerRegistered: TypedContractEvent<
      PlayerRegisteredEvent.InputTuple,
      PlayerRegisteredEvent.OutputTuple,
      PlayerRegisteredEvent.OutputObject
    >;

    "PlayersRegistered(address[])": TypedContractEvent<
      PlayersRegisteredEvent.InputTuple,
      PlayersRegisteredEvent.OutputTuple,
      PlayersRegisteredEvent.OutputObject
    >;
    PlayersRegistered: TypedContractEvent<
      PlayersRegisteredEvent.InputTuple,
      PlayersRegisteredEvent.OutputTuple,
      PlayersRegisteredEvent.OutputObject
    >;

    "RefundFailed(address,uint256)": TypedContractEvent<
      RefundFailedEvent.InputTuple,
      RefundFailedEvent.OutputTuple,
      RefundFailedEvent.OutputObject
    >;
    RefundFailed: TypedContractEvent<
      RefundFailedEvent.InputTuple,
      RefundFailedEvent.OutputTuple,
      RefundFailedEvent.OutputObject
    >;

    "RegistrationClosed()": TypedContractEvent<
      RegistrationClosedEvent.InputTuple,
      RegistrationClosedEvent.OutputTuple,
      RegistrationClosedEvent.OutputObject
    >;
    RegistrationClosed: TypedContractEvent<
      RegistrationClosedEvent.InputTuple,
      RegistrationClosedEvent.OutputTuple,
      RegistrationClosedEvent.OutputObject
    >;

    "RegistrationFeeChanged(uint256)": TypedContractEvent<
      RegistrationFeeChangedEvent.InputTuple,
      RegistrationFeeChangedEvent.OutputTuple,
      RegistrationFeeChangedEvent.OutputObject
    >;
    RegistrationFeeChanged: TypedContractEvent<
      RegistrationFeeChangedEvent.InputTuple,
      RegistrationFeeChangedEvent.OutputTuple,
      RegistrationFeeChangedEvent.OutputObject
    >;
  };
}
