/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface MorseCallerInterface extends Interface {
  getFunction(
    nameOrSignature: "authorize" | "challenge" | "target"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "CallerDeployed" | "CallingZ1"
  ): EventFragment;

  encodeFunctionData(functionFragment: "authorize", values?: undefined): string;
  encodeFunctionData(functionFragment: "challenge", values?: undefined): string;
  encodeFunctionData(functionFragment: "target", values?: undefined): string;

  decodeFunctionResult(functionFragment: "authorize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "challenge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "target", data: BytesLike): Result;
}

export namespace CallerDeployedEvent {
  export type InputTuple = [caller: AddressLike, target: AddressLike];
  export type OutputTuple = [caller: string, target: string];
  export interface OutputObject {
    caller: string;
    target: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CallingZ1Event {
  export type InputTuple = [caller: AddressLike, target: AddressLike];
  export type OutputTuple = [caller: string, target: string];
  export interface OutputObject {
    caller: string;
    target: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MorseCaller extends BaseContract {
  connect(runner?: ContractRunner | null): MorseCaller;
  waitForDeployment(): Promise<this>;

  interface: MorseCallerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  authorize: TypedContractMethod<[], [void], "nonpayable">;

  challenge: TypedContractMethod<[], [string], "view">;

  target: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "authorize"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "challenge"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "target"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "CallerDeployed"
  ): TypedContractEvent<
    CallerDeployedEvent.InputTuple,
    CallerDeployedEvent.OutputTuple,
    CallerDeployedEvent.OutputObject
  >;
  getEvent(
    key: "CallingZ1"
  ): TypedContractEvent<
    CallingZ1Event.InputTuple,
    CallingZ1Event.OutputTuple,
    CallingZ1Event.OutputObject
  >;

  filters: {
    "CallerDeployed(address,address)": TypedContractEvent<
      CallerDeployedEvent.InputTuple,
      CallerDeployedEvent.OutputTuple,
      CallerDeployedEvent.OutputObject
    >;
    CallerDeployed: TypedContractEvent<
      CallerDeployedEvent.InputTuple,
      CallerDeployedEvent.OutputTuple,
      CallerDeployedEvent.OutputObject
    >;

    "CallingZ1(address,address)": TypedContractEvent<
      CallingZ1Event.InputTuple,
      CallingZ1Event.OutputTuple,
      CallingZ1Event.OutputObject
    >;
    CallingZ1: TypedContractEvent<
      CallingZ1Event.InputTuple,
      CallingZ1Event.OutputTuple,
      CallingZ1Event.OutputObject
    >;
  };
}
