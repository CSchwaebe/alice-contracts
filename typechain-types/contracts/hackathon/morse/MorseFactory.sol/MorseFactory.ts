/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface MorseFactoryInterface extends Interface {
  getFunction(
    nameOrSignature: "challenge" | "exploit" | "owner"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AuthorizationComplete"
      | "CallerDeployed"
      | "CallingZ5"
      | "ExploitStarted"
  ): EventFragment;

  encodeFunctionData(functionFragment: "challenge", values?: undefined): string;
  encodeFunctionData(functionFragment: "exploit", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;

  decodeFunctionResult(functionFragment: "challenge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exploit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
}

export namespace AuthorizationCompleteEvent {
  export type InputTuple = [authorized: AddressLike];
  export type OutputTuple = [authorized: string];
  export interface OutputObject {
    authorized: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CallerDeployedEvent {
  export type InputTuple = [caller: AddressLike];
  export type OutputTuple = [caller: string];
  export interface OutputObject {
    caller: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CallingZ5Event {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExploitStartedEvent {
  export type InputTuple = [owner: AddressLike];
  export type OutputTuple = [owner: string];
  export interface OutputObject {
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MorseFactory extends BaseContract {
  connect(runner?: ContractRunner | null): MorseFactory;
  waitForDeployment(): Promise<this>;

  interface: MorseFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  challenge: TypedContractMethod<[], [string], "view">;

  exploit: TypedContractMethod<[], [void], "nonpayable">;

  owner: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "challenge"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "exploit"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "AuthorizationComplete"
  ): TypedContractEvent<
    AuthorizationCompleteEvent.InputTuple,
    AuthorizationCompleteEvent.OutputTuple,
    AuthorizationCompleteEvent.OutputObject
  >;
  getEvent(
    key: "CallerDeployed"
  ): TypedContractEvent<
    CallerDeployedEvent.InputTuple,
    CallerDeployedEvent.OutputTuple,
    CallerDeployedEvent.OutputObject
  >;
  getEvent(
    key: "CallingZ5"
  ): TypedContractEvent<
    CallingZ5Event.InputTuple,
    CallingZ5Event.OutputTuple,
    CallingZ5Event.OutputObject
  >;
  getEvent(
    key: "ExploitStarted"
  ): TypedContractEvent<
    ExploitStartedEvent.InputTuple,
    ExploitStartedEvent.OutputTuple,
    ExploitStartedEvent.OutputObject
  >;

  filters: {
    "AuthorizationComplete(address)": TypedContractEvent<
      AuthorizationCompleteEvent.InputTuple,
      AuthorizationCompleteEvent.OutputTuple,
      AuthorizationCompleteEvent.OutputObject
    >;
    AuthorizationComplete: TypedContractEvent<
      AuthorizationCompleteEvent.InputTuple,
      AuthorizationCompleteEvent.OutputTuple,
      AuthorizationCompleteEvent.OutputObject
    >;

    "CallerDeployed(address)": TypedContractEvent<
      CallerDeployedEvent.InputTuple,
      CallerDeployedEvent.OutputTuple,
      CallerDeployedEvent.OutputObject
    >;
    CallerDeployed: TypedContractEvent<
      CallerDeployedEvent.InputTuple,
      CallerDeployedEvent.OutputTuple,
      CallerDeployedEvent.OutputObject
    >;

    "CallingZ5()": TypedContractEvent<
      CallingZ5Event.InputTuple,
      CallingZ5Event.OutputTuple,
      CallingZ5Event.OutputObject
    >;
    CallingZ5: TypedContractEvent<
      CallingZ5Event.InputTuple,
      CallingZ5Event.OutputTuple,
      CallingZ5Event.OutputObject
    >;

    "ExploitStarted(address)": TypedContractEvent<
      ExploitStartedEvent.InputTuple,
      ExploitStartedEvent.OutputTuple,
      ExploitStartedEvent.OutputObject
    >;
    ExploitStarted: TypedContractEvent<
      ExploitStartedEvent.InputTuple,
      ExploitStartedEvent.OutputTuple,
      ExploitStartedEvent.OutputObject
    >;
  };
}
