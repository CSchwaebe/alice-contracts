/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface CallerInterface extends Interface {
  getFunction(nameOrSignature: "callZ1"): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "CallingZ1"): EventFragment;

  encodeFunctionData(
    functionFragment: "callZ1",
    values: [AddressLike, BytesLike, AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "callZ1", data: BytesLike): Result;
}

export namespace CallingZ1Event {
  export type InputTuple = [x: BytesLike, y: AddressLike];
  export type OutputTuple = [x: string, y: string];
  export interface OutputObject {
    x: string;
    y: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Caller extends BaseContract {
  connect(runner?: ContractRunner | null): Caller;
  waitForDeployment(): Promise<this>;

  interface: CallerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  callZ1: TypedContractMethod<
    [challenge: AddressLike, x: BytesLike, y: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "callZ1"
  ): TypedContractMethod<
    [challenge: AddressLike, x: BytesLike, y: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "CallingZ1"
  ): TypedContractEvent<
    CallingZ1Event.InputTuple,
    CallingZ1Event.OutputTuple,
    CallingZ1Event.OutputObject
  >;

  filters: {
    "CallingZ1(bytes8,address)": TypedContractEvent<
      CallingZ1Event.InputTuple,
      CallingZ1Event.OutputTuple,
      CallingZ1Event.OutputObject
    >;
    CallingZ1: TypedContractEvent<
      CallingZ1Event.InputTuple,
      CallingZ1Event.OutputTuple,
      CallingZ1Event.OutputObject
    >;
  };
}
