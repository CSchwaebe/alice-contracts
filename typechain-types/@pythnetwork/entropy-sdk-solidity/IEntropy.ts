/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace EntropyStructs {
  export type ProviderInfoStruct = {
    feeInWei: BigNumberish;
    accruedFeesInWei: BigNumberish;
    originalCommitment: BytesLike;
    originalCommitmentSequenceNumber: BigNumberish;
    commitmentMetadata: BytesLike;
    uri: BytesLike;
    endSequenceNumber: BigNumberish;
    sequenceNumber: BigNumberish;
    currentCommitment: BytesLike;
    currentCommitmentSequenceNumber: BigNumberish;
    feeManager: AddressLike;
  };

  export type ProviderInfoStructOutput = [
    feeInWei: bigint,
    accruedFeesInWei: bigint,
    originalCommitment: string,
    originalCommitmentSequenceNumber: bigint,
    commitmentMetadata: string,
    uri: string,
    endSequenceNumber: bigint,
    sequenceNumber: bigint,
    currentCommitment: string,
    currentCommitmentSequenceNumber: bigint,
    feeManager: string
  ] & {
    feeInWei: bigint;
    accruedFeesInWei: bigint;
    originalCommitment: string;
    originalCommitmentSequenceNumber: bigint;
    commitmentMetadata: string;
    uri: string;
    endSequenceNumber: bigint;
    sequenceNumber: bigint;
    currentCommitment: string;
    currentCommitmentSequenceNumber: bigint;
    feeManager: string;
  };

  export type RequestStruct = {
    provider: AddressLike;
    sequenceNumber: BigNumberish;
    numHashes: BigNumberish;
    commitment: BytesLike;
    blockNumber: BigNumberish;
    requester: AddressLike;
    useBlockhash: boolean;
    isRequestWithCallback: boolean;
  };

  export type RequestStructOutput = [
    provider: string,
    sequenceNumber: bigint,
    numHashes: bigint,
    commitment: string,
    blockNumber: bigint,
    requester: string,
    useBlockhash: boolean,
    isRequestWithCallback: boolean
  ] & {
    provider: string;
    sequenceNumber: bigint;
    numHashes: bigint;
    commitment: string;
    blockNumber: bigint;
    requester: string;
    useBlockhash: boolean;
    isRequestWithCallback: boolean;
  };
}

export interface IEntropyInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "combineRandomValues"
      | "constructUserCommitment"
      | "getAccruedPythFees"
      | "getDefaultProvider"
      | "getFee"
      | "getProviderInfo"
      | "getRequest"
      | "register"
      | "request"
      | "requestWithCallback"
      | "reveal"
      | "revealWithCallback"
      | "setFeeManager"
      | "setProviderFee"
      | "setProviderFeeAsFeeManager"
      | "setProviderUri"
      | "withdraw"
      | "withdrawAsFeeManager"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ProviderFeeManagerUpdated"
      | "ProviderFeeUpdated"
      | "ProviderUriUpdated"
      | "Registered"
      | "Requested"
      | "RequestedWithCallback"
      | "Revealed"
      | "RevealedWithCallback"
      | "Withdrawal"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "combineRandomValues",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "constructUserCommitment",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccruedPythFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDefaultProvider",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getFee", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "getProviderInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequest",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [BigNumberish, BytesLike, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "request",
    values: [AddressLike, BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "requestWithCallback",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "reveal",
    values: [AddressLike, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revealWithCallback",
    values: [AddressLike, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setProviderFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProviderFeeAsFeeManager",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProviderUri",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAsFeeManager",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "combineRandomValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "constructUserCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccruedPythFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDefaultProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProviderInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRequest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "request", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestWithCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reveal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revealWithCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProviderFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProviderFeeAsFeeManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProviderUri",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAsFeeManager",
    data: BytesLike
  ): Result;
}

export namespace ProviderFeeManagerUpdatedEvent {
  export type InputTuple = [
    provider: AddressLike,
    oldFeeManager: AddressLike,
    newFeeManager: AddressLike
  ];
  export type OutputTuple = [
    provider: string,
    oldFeeManager: string,
    newFeeManager: string
  ];
  export interface OutputObject {
    provider: string;
    oldFeeManager: string;
    newFeeManager: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProviderFeeUpdatedEvent {
  export type InputTuple = [
    provider: AddressLike,
    oldFee: BigNumberish,
    newFee: BigNumberish
  ];
  export type OutputTuple = [provider: string, oldFee: bigint, newFee: bigint];
  export interface OutputObject {
    provider: string;
    oldFee: bigint;
    newFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProviderUriUpdatedEvent {
  export type InputTuple = [
    provider: AddressLike,
    oldUri: BytesLike,
    newUri: BytesLike
  ];
  export type OutputTuple = [provider: string, oldUri: string, newUri: string];
  export interface OutputObject {
    provider: string;
    oldUri: string;
    newUri: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RegisteredEvent {
  export type InputTuple = [provider: EntropyStructs.ProviderInfoStruct];
  export type OutputTuple = [provider: EntropyStructs.ProviderInfoStructOutput];
  export interface OutputObject {
    provider: EntropyStructs.ProviderInfoStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestedEvent {
  export type InputTuple = [request: EntropyStructs.RequestStruct];
  export type OutputTuple = [request: EntropyStructs.RequestStructOutput];
  export interface OutputObject {
    request: EntropyStructs.RequestStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestedWithCallbackEvent {
  export type InputTuple = [
    provider: AddressLike,
    requestor: AddressLike,
    sequenceNumber: BigNumberish,
    userRandomNumber: BytesLike,
    request: EntropyStructs.RequestStruct
  ];
  export type OutputTuple = [
    provider: string,
    requestor: string,
    sequenceNumber: bigint,
    userRandomNumber: string,
    request: EntropyStructs.RequestStructOutput
  ];
  export interface OutputObject {
    provider: string;
    requestor: string;
    sequenceNumber: bigint;
    userRandomNumber: string;
    request: EntropyStructs.RequestStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RevealedEvent {
  export type InputTuple = [
    request: EntropyStructs.RequestStruct,
    userRevelation: BytesLike,
    providerRevelation: BytesLike,
    blockHash: BytesLike,
    randomNumber: BytesLike
  ];
  export type OutputTuple = [
    request: EntropyStructs.RequestStructOutput,
    userRevelation: string,
    providerRevelation: string,
    blockHash: string,
    randomNumber: string
  ];
  export interface OutputObject {
    request: EntropyStructs.RequestStructOutput;
    userRevelation: string;
    providerRevelation: string;
    blockHash: string;
    randomNumber: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RevealedWithCallbackEvent {
  export type InputTuple = [
    request: EntropyStructs.RequestStruct,
    userRandomNumber: BytesLike,
    providerRevelation: BytesLike,
    randomNumber: BytesLike
  ];
  export type OutputTuple = [
    request: EntropyStructs.RequestStructOutput,
    userRandomNumber: string,
    providerRevelation: string,
    randomNumber: string
  ];
  export interface OutputObject {
    request: EntropyStructs.RequestStructOutput;
    userRandomNumber: string;
    providerRevelation: string;
    randomNumber: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalEvent {
  export type InputTuple = [
    provider: AddressLike,
    recipient: AddressLike,
    withdrawnAmount: BigNumberish
  ];
  export type OutputTuple = [
    provider: string,
    recipient: string,
    withdrawnAmount: bigint
  ];
  export interface OutputObject {
    provider: string;
    recipient: string;
    withdrawnAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IEntropy extends BaseContract {
  connect(runner?: ContractRunner | null): IEntropy;
  waitForDeployment(): Promise<this>;

  interface: IEntropyInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  combineRandomValues: TypedContractMethod<
    [
      userRandomness: BytesLike,
      providerRandomness: BytesLike,
      blockHash: BytesLike
    ],
    [string],
    "view"
  >;

  constructUserCommitment: TypedContractMethod<
    [userRandomness: BytesLike],
    [string],
    "view"
  >;

  getAccruedPythFees: TypedContractMethod<[], [bigint], "view">;

  getDefaultProvider: TypedContractMethod<[], [string], "view">;

  getFee: TypedContractMethod<[provider: AddressLike], [bigint], "view">;

  getProviderInfo: TypedContractMethod<
    [provider: AddressLike],
    [EntropyStructs.ProviderInfoStructOutput],
    "view"
  >;

  getRequest: TypedContractMethod<
    [provider: AddressLike, sequenceNumber: BigNumberish],
    [EntropyStructs.RequestStructOutput],
    "view"
  >;

  register: TypedContractMethod<
    [
      feeInWei: BigNumberish,
      commitment: BytesLike,
      commitmentMetadata: BytesLike,
      chainLength: BigNumberish,
      uri: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  request: TypedContractMethod<
    [provider: AddressLike, userCommitment: BytesLike, useBlockHash: boolean],
    [bigint],
    "payable"
  >;

  requestWithCallback: TypedContractMethod<
    [provider: AddressLike, userRandomNumber: BytesLike],
    [bigint],
    "payable"
  >;

  reveal: TypedContractMethod<
    [
      provider: AddressLike,
      sequenceNumber: BigNumberish,
      userRevelation: BytesLike,
      providerRevelation: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  revealWithCallback: TypedContractMethod<
    [
      provider: AddressLike,
      sequenceNumber: BigNumberish,
      userRandomNumber: BytesLike,
      providerRevelation: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setFeeManager: TypedContractMethod<
    [manager: AddressLike],
    [void],
    "nonpayable"
  >;

  setProviderFee: TypedContractMethod<
    [newFeeInWei: BigNumberish],
    [void],
    "nonpayable"
  >;

  setProviderFeeAsFeeManager: TypedContractMethod<
    [provider: AddressLike, newFeeInWei: BigNumberish],
    [void],
    "nonpayable"
  >;

  setProviderUri: TypedContractMethod<
    [newUri: BytesLike],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  withdrawAsFeeManager: TypedContractMethod<
    [provider: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "combineRandomValues"
  ): TypedContractMethod<
    [
      userRandomness: BytesLike,
      providerRandomness: BytesLike,
      blockHash: BytesLike
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "constructUserCommitment"
  ): TypedContractMethod<[userRandomness: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getAccruedPythFees"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDefaultProvider"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getFee"
  ): TypedContractMethod<[provider: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getProviderInfo"
  ): TypedContractMethod<
    [provider: AddressLike],
    [EntropyStructs.ProviderInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRequest"
  ): TypedContractMethod<
    [provider: AddressLike, sequenceNumber: BigNumberish],
    [EntropyStructs.RequestStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "register"
  ): TypedContractMethod<
    [
      feeInWei: BigNumberish,
      commitment: BytesLike,
      commitmentMetadata: BytesLike,
      chainLength: BigNumberish,
      uri: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "request"
  ): TypedContractMethod<
    [provider: AddressLike, userCommitment: BytesLike, useBlockHash: boolean],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "requestWithCallback"
  ): TypedContractMethod<
    [provider: AddressLike, userRandomNumber: BytesLike],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "reveal"
  ): TypedContractMethod<
    [
      provider: AddressLike,
      sequenceNumber: BigNumberish,
      userRevelation: BytesLike,
      providerRevelation: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revealWithCallback"
  ): TypedContractMethod<
    [
      provider: AddressLike,
      sequenceNumber: BigNumberish,
      userRandomNumber: BytesLike,
      providerRevelation: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFeeManager"
  ): TypedContractMethod<[manager: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setProviderFee"
  ): TypedContractMethod<[newFeeInWei: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setProviderFeeAsFeeManager"
  ): TypedContractMethod<
    [provider: AddressLike, newFeeInWei: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setProviderUri"
  ): TypedContractMethod<[newUri: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawAsFeeManager"
  ): TypedContractMethod<
    [provider: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ProviderFeeManagerUpdated"
  ): TypedContractEvent<
    ProviderFeeManagerUpdatedEvent.InputTuple,
    ProviderFeeManagerUpdatedEvent.OutputTuple,
    ProviderFeeManagerUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ProviderFeeUpdated"
  ): TypedContractEvent<
    ProviderFeeUpdatedEvent.InputTuple,
    ProviderFeeUpdatedEvent.OutputTuple,
    ProviderFeeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ProviderUriUpdated"
  ): TypedContractEvent<
    ProviderUriUpdatedEvent.InputTuple,
    ProviderUriUpdatedEvent.OutputTuple,
    ProviderUriUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Registered"
  ): TypedContractEvent<
    RegisteredEvent.InputTuple,
    RegisteredEvent.OutputTuple,
    RegisteredEvent.OutputObject
  >;
  getEvent(
    key: "Requested"
  ): TypedContractEvent<
    RequestedEvent.InputTuple,
    RequestedEvent.OutputTuple,
    RequestedEvent.OutputObject
  >;
  getEvent(
    key: "RequestedWithCallback"
  ): TypedContractEvent<
    RequestedWithCallbackEvent.InputTuple,
    RequestedWithCallbackEvent.OutputTuple,
    RequestedWithCallbackEvent.OutputObject
  >;
  getEvent(
    key: "Revealed"
  ): TypedContractEvent<
    RevealedEvent.InputTuple,
    RevealedEvent.OutputTuple,
    RevealedEvent.OutputObject
  >;
  getEvent(
    key: "RevealedWithCallback"
  ): TypedContractEvent<
    RevealedWithCallbackEvent.InputTuple,
    RevealedWithCallbackEvent.OutputTuple,
    RevealedWithCallbackEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawal"
  ): TypedContractEvent<
    WithdrawalEvent.InputTuple,
    WithdrawalEvent.OutputTuple,
    WithdrawalEvent.OutputObject
  >;

  filters: {
    "ProviderFeeManagerUpdated(address,address,address)": TypedContractEvent<
      ProviderFeeManagerUpdatedEvent.InputTuple,
      ProviderFeeManagerUpdatedEvent.OutputTuple,
      ProviderFeeManagerUpdatedEvent.OutputObject
    >;
    ProviderFeeManagerUpdated: TypedContractEvent<
      ProviderFeeManagerUpdatedEvent.InputTuple,
      ProviderFeeManagerUpdatedEvent.OutputTuple,
      ProviderFeeManagerUpdatedEvent.OutputObject
    >;

    "ProviderFeeUpdated(address,uint128,uint128)": TypedContractEvent<
      ProviderFeeUpdatedEvent.InputTuple,
      ProviderFeeUpdatedEvent.OutputTuple,
      ProviderFeeUpdatedEvent.OutputObject
    >;
    ProviderFeeUpdated: TypedContractEvent<
      ProviderFeeUpdatedEvent.InputTuple,
      ProviderFeeUpdatedEvent.OutputTuple,
      ProviderFeeUpdatedEvent.OutputObject
    >;

    "ProviderUriUpdated(address,bytes,bytes)": TypedContractEvent<
      ProviderUriUpdatedEvent.InputTuple,
      ProviderUriUpdatedEvent.OutputTuple,
      ProviderUriUpdatedEvent.OutputObject
    >;
    ProviderUriUpdated: TypedContractEvent<
      ProviderUriUpdatedEvent.InputTuple,
      ProviderUriUpdatedEvent.OutputTuple,
      ProviderUriUpdatedEvent.OutputObject
    >;

    "Registered(tuple)": TypedContractEvent<
      RegisteredEvent.InputTuple,
      RegisteredEvent.OutputTuple,
      RegisteredEvent.OutputObject
    >;
    Registered: TypedContractEvent<
      RegisteredEvent.InputTuple,
      RegisteredEvent.OutputTuple,
      RegisteredEvent.OutputObject
    >;

    "Requested(tuple)": TypedContractEvent<
      RequestedEvent.InputTuple,
      RequestedEvent.OutputTuple,
      RequestedEvent.OutputObject
    >;
    Requested: TypedContractEvent<
      RequestedEvent.InputTuple,
      RequestedEvent.OutputTuple,
      RequestedEvent.OutputObject
    >;

    "RequestedWithCallback(address,address,uint64,bytes32,tuple)": TypedContractEvent<
      RequestedWithCallbackEvent.InputTuple,
      RequestedWithCallbackEvent.OutputTuple,
      RequestedWithCallbackEvent.OutputObject
    >;
    RequestedWithCallback: TypedContractEvent<
      RequestedWithCallbackEvent.InputTuple,
      RequestedWithCallbackEvent.OutputTuple,
      RequestedWithCallbackEvent.OutputObject
    >;

    "Revealed(tuple,bytes32,bytes32,bytes32,bytes32)": TypedContractEvent<
      RevealedEvent.InputTuple,
      RevealedEvent.OutputTuple,
      RevealedEvent.OutputObject
    >;
    Revealed: TypedContractEvent<
      RevealedEvent.InputTuple,
      RevealedEvent.OutputTuple,
      RevealedEvent.OutputObject
    >;

    "RevealedWithCallback(tuple,bytes32,bytes32,bytes32)": TypedContractEvent<
      RevealedWithCallbackEvent.InputTuple,
      RevealedWithCallbackEvent.OutputTuple,
      RevealedWithCallbackEvent.OutputObject
    >;
    RevealedWithCallback: TypedContractEvent<
      RevealedWithCallbackEvent.InputTuple,
      RevealedWithCallbackEvent.OutputTuple,
      RevealedWithCallbackEvent.OutputObject
    >;

    "Withdrawal(address,address,uint128)": TypedContractEvent<
      WithdrawalEvent.InputTuple,
      WithdrawalEvent.OutputTuple,
      WithdrawalEvent.OutputObject
    >;
    Withdrawal: TypedContractEvent<
      WithdrawalEvent.InputTuple,
      WithdrawalEvent.OutputTuple,
      WithdrawalEvent.OutputObject
    >;
  };
}
