/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { Ragnarok, RagnarokInterface } from "../../contracts/Ragnarok";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [],
    name: "GameReset",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "player",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "PlayerRefunded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "player",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "playerNumber",
        type: "uint256",
      },
    ],
    name: "PlayerRegistered",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "player",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "RefundFailed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [],
    name: "RegistrationClosed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "newFee",
        type: "uint256",
      },
    ],
    name: "RegistrationFeeChanged",
    type: "event",
  },
  {
    inputs: [],
    name: "MAX_PLAYERS",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "closeRegistration",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getPlayerCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRegisteredPlayers",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "isRegistered",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "playerNumbers",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "register",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "registeredPlayers",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "registrationClosed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "registrationFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "resetGame",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_newFee",
        type: "uint256",
      },
    ],
    name: "setRegistrationFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052670186cc6acd4b0000600455348015601b57600080fd5b503380604157604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b604881604d565b50609d565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610b4a806100ac6000396000f3fe6080604052600436106100f35760003560e01c80638da5cb5b1161008a578063c320c72711610059578063c320c7271461024c578063c3c5a5471461026c578063e03a02881461029c578063f2fde38b146102c957600080fd5b80638da5cb5b146101da5780639f9a093c146101f8578063bb47221914610222578063c2e522061461023757600080fd5b80634411b3eb116100c65780634411b3eb14610162578063715018a6146101785780637dc673bc1461018d57806389a5b229146101a257600080fd5b806314c44e09146100f85780631a8e2514146101215780631aa3a008146101435780633ccfd60b1461014d575b600080fd5b34801561010457600080fd5b5061010e60045481565b6040519081526020015b60405180910390f35b34801561012d57600080fd5b506101366102e9565b6040516101189190610a42565b61014b61034b565b005b34801561015957600080fd5b5061014b6105e3565b34801561016e57600080fd5b5061010e6103e881565b34801561018457600080fd5b5061014b610685565b34801561019957600080fd5b5061014b610699565b3480156101ae57600080fd5b506101c26101bd366004610a8e565b6106d9565b6040516001600160a01b039091168152602001610118565b3480156101e657600080fd5b506000546001600160a01b03166101c2565b34801561020457600080fd5b506003546102129060ff1681565b6040519015158152602001610118565b34801561022e57600080fd5b5061014b610703565b34801561024357600080fd5b5060015461010e565b34801561025857600080fd5b5061014b610267366004610a8e565b6108c5565b34801561027857600080fd5b50610212610287366004610aa7565b60026020526000908152604090205460ff1681565b3480156102a857600080fd5b5061010e6102b7366004610aa7565b60056020526000908152604090205481565b3480156102d557600080fd5b5061014b6102e4366004610aa7565b610958565b6060600180548060200260200160405190810160405280929190818152602001828054801561034157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610323575b5050505050905090565b60035460ff161561039c5760405162461bcd60e51b8152602060048201526016602482015275149959da5cdd1c985d1a5bdb881a5cc818db1bdcd95960521b60448201526064015b60405180910390fd5b6004543410156103fe5760405162461bcd60e51b815260206004820152602760248201527f4d7573742073656e64206174206c656173742074686520726567697374726174604482015266696f6e2066656560c81b6064820152608401610393565b3360009081526002602052604090205460ff16156104535760405162461bcd60e51b8152602060048201526012602482015271105b1c9958591e481c9959da5cdd195c995960721b6044820152606401610393565b6001805433600081815260056020908152604080832085905584860186557fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6850180546001600160a01b031916851790556002825291829020805460ff191690951790945551828152919290917f324cb0062138d65997c86cd3012489ceb351d602f2f55c7408306e8040c79f3f910160405180910390a26001546103e81161052d576003805460ff191660011790556040517f2fc209f3df2fb10c5fcb1620d3e5f067b9ef99813ca8fa6b24de0418bdac542090600090a15b60006004543461053d9190610ad7565b905080156105df57604051600090339083908381818185875af1925050503d8060008114610587576040519150601f19603f3d011682016040523d82523d6000602084013e61058c565b606091505b50509050806105dd5760405162461bcd60e51b815260206004820152601f60248201527f4661696c656420746f2072657475726e20657863657373207061796d656e74006044820152606401610393565b505b5050565b6105eb610993565b600080546040516001600160a01b039091169047908381818185875af1925050503d8060008114610638576040519150601f19603f3d011682016040523d82523d6000602084013e61063d565b606091505b50509050806106825760405162461bcd60e51b815260206004820152601160248201527015da5d1a191c985dd85b0819985a5b1959607a1b6044820152606401610393565b50565b61068d610993565b61069760006109c0565b565b6106a1610993565b6003805460ff191660011790556040517f2fc209f3df2fb10c5fcb1620d3e5f067b9ef99813ca8fa6b24de0418bdac542090600090a1565b600181815481106106e957600080fd5b6000918252602090912001546001600160a01b0316905081565b61070b610993565b60035460ff16158061071e575060015415155b6107615760405162461bcd60e51b8152602060048201526014602482015273139bc81c1b185e595c9cc81d1bc81c99599d5b9960621b6044820152606401610393565b60005b6001548110156108835760006001828154811061078357610783610afe565b60009182526020822001546004546040516001600160a01b03909216935083918381818185875af1925050503d80600081146107db576040519150601f19603f3d011682016040523d82523d6000602084013e6107e0565b606091505b505090508061083357816001600160a01b03167faf73b0b217208b61be286bbc37095bce7eb8b9ccf617244c2f0f154e8e04e3ff60045460405161082691815260200190565b60405180910390a2610879565b816001600160a01b03167f48d31f1c958cd44f1f83a52ae2dfaf61e88a1b82c07a6d5711a4abef60b6531e60045460405161087091815260200190565b60405180910390a25b5050600101610764565b5061089060016000610a10565b6003805460ff191690556040517fc6976b6410888b44c765590c8368eb4a60e0431d4ad683c8a53ea85a8479f22e90600090a1565b6108cd610993565b6000811161091d5760405162461bcd60e51b815260206004820152601a60248201527f466565206d7573742062652067726561746572207468616e20300000000000006044820152606401610393565b60048190556040518181527ffd29c2cd5dc77cf2bad34e3b80ec2592a7c16d32869ccaee99f95af250db954a9060200160405180910390a150565b610960610993565b6001600160a01b03811661098a57604051631e4fbdf760e01b815260006004820152602401610393565b610682816109c0565b6000546001600160a01b031633146106975760405163118cdaa760e01b8152336004820152602401610393565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b508054600082559060005260206000209081019061068291905b80821115610a3e5760008155600101610a2a565b5090565b602080825282518282018190526000918401906040840190835b81811015610a835783516001600160a01b0316835260209384019390920191600101610a5c565b509095945050505050565b600060208284031215610aa057600080fd5b5035919050565b600060208284031215610ab957600080fd5b81356001600160a01b0381168114610ad057600080fd5b9392505050565b81810381811115610af857634e487b7160e01b600052601160045260246000fd5b92915050565b634e487b7160e01b600052603260045260246000fdfea26469706673582212209b087bb0d33cdc96bf8ca5dcd4f148c4e611d65b1f0cbd8bd8f40a2552ef242764736f6c634300081c0033";

type RagnarokConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RagnarokConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Ragnarok__factory extends ContractFactory {
  constructor(...args: RagnarokConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Ragnarok & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Ragnarok__factory {
    return super.connect(runner) as Ragnarok__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RagnarokInterface {
    return new Interface(_abi) as RagnarokInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Ragnarok {
    return new Contract(address, _abi, runner) as unknown as Ragnarok;
  }
}
