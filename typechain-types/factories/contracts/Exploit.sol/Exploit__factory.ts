/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { PayableOverrides } from "../../../common";
import type {
  Exploit,
  ExploitInterface,
} from "../../../contracts/Exploit.sol/Exploit";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
    ],
    stateMutability: "payable",
    type: "constructor",
  },
] as const;

const _bytecode =
  "0x60808060405260208161018d803803809161001a8285610153565b83398101031261014e57516001600160a01b0381169081900361014e576000809160046040518094819363ebfdf02b60e01b83525af1801561008157600090610096575b5050476100685733ff5b60008080804781811561008d575b3390f1156100815733ff5b6040513d6000823e3d90fd5b506108fc610076565b3d8082843e6100a58184610153565b82019160208184031261014a578051906001600160401b038211610132570182601f8201121561014a578051906001600160401b03821161013657604051936100f8601f8401601f191660200186610153565b8285526020838301011161013257825b82811061011d5750508201602001523861005e565b80602080928401015182828801015201610108565b8280fd5b634e487b7160e01b83526041600452602483fd5b5080fd5b600080fd5b601f909101601f19168101906001600160401b0382119082101761017657604052565b634e487b7160e01b600052604160045260246000fdfe";

type ExploitConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ExploitConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Exploit__factory extends ContractFactory {
  constructor(...args: ExploitConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    target: AddressLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(target, overrides || {});
  }
  override deploy(
    target: AddressLike,
    overrides?: PayableOverrides & { from?: string }
  ) {
    return super.deploy(target, overrides || {}) as Promise<
      Exploit & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Exploit__factory {
    return super.connect(runner) as Exploit__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ExploitInterface {
    return new Interface(_abi) as ExploitInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Exploit {
    return new Contract(address, _abi, runner) as unknown as Exploit;
  }
}
