/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  Doors,
  DoorsInterface,
} from "../../../../contracts/games/Doors.sol/Doors";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "gameId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "player",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    name: "DoorOpened",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "gameId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address[]",
        name: "winners",
        type: "address[]",
      },
    ],
    name: "GameCompleted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address[]",
        name: "players",
        type: "address[]",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "playerNumbers",
        type: "uint256[]",
      },
    ],
    name: "GameInitialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "newGameMaster",
        type: "address",
      },
    ],
    name: "GameMasterChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "gameId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "player",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "playerNumber",
        type: "uint256",
      },
    ],
    name: "PlayerEliminated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "gameId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "roundNumber",
        type: "uint256",
      },
    ],
    name: "RoundEnded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "gameId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "roundNumber",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "endTime",
        type: "uint256",
      },
    ],
    name: "RoundStarted",
    type: "event",
  },
  {
    inputs: [],
    name: "endExpiredGames",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "endGame",
    outputs: [
      {
        internalType: "address[]",
        name: "winners",
        type: "address[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "gameIdCounter",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "gameMaster",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "gameId",
        type: "uint256",
      },
    ],
    name: "getActivePlayers",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getActivePlayers",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "gameId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "player",
        type: "address",
      },
    ],
    name: "getDoorsOpened",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "gameId",
        type: "uint256",
      },
    ],
    name: "getGameInfo",
    outputs: [
      {
        components: [
          {
            internalType: "enum GameState",
            name: "state",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "currentRound",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "roundEndTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "gameStartTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "gameEndTime",
            type: "uint256",
          },
        ],
        internalType: "struct IGame.GameInfo",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getGameName",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "gameId",
        type: "uint256",
      },
    ],
    name: "getGameState",
    outputs: [
      {
        internalType: "enum GameState",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getGames",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "gameId",
            type: "uint256",
          },
          {
            internalType: "enum GameState",
            name: "state",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "currentRound",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "activePlayerCount",
            type: "uint256",
          },
        ],
        internalType: "struct GameInstanceInfo[]",
        name: "gamesInfo",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "player",
        type: "address",
      },
    ],
    name: "getPlayerGameId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "gameId",
        type: "uint256",
      },
    ],
    name: "getPlayerInfo",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "playerAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "playerNumber",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "isActive",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "doorsOpened",
            type: "uint256",
          },
        ],
        internalType: "struct Doors.PlayerInfo[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "gameId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "player",
        type: "address",
      },
    ],
    name: "getPlayerNumber",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "gameId",
        type: "uint256",
      },
    ],
    name: "getPlayers",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getPlayers",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_players",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "_playerNumbers",
        type: "uint256[]",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "isPlayerInGame",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "openDoor",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "playerGameId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "registerMe",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_newGameMaster",
        type: "address",
      },
    ],
    name: "setGameMaster",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "startGames",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60808060405234608757331560715760008054336001600160a01b0319821681178355916001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a3600180546001600160a01b03191633179055612072908161008d8239f35b631e4fbdf760e01b600052600060045260246000fd5b600080fdfe608080604052600436101561001357600080fd5b60003560e01c9081631bb412d614611356575080631e756ff9146112ec57806325b05c88146112b2578063342ed9561461125b5780633532804d146111c05780633c4f5a66146110ea578063460e20491461108057806347e1d55014610fa2578063574a5b2014610f635780636cbc2ded14610d47578063715018a614610cee578063773b549d14610cc35780637fbbe46f1461098d5780638b5b9ccc146108945780638da5cb5b1461086b5780639a198d6114610775578063bbda33d9146106f9578063bdf84ae7146106d0578063c04c59471461056b578063c2e94927146104b0578063d0f3a21e1461040f578063db0e127a146103f4578063e81de9f5146103ba578063ea17532e1461021f578063f2fde38b146101965763ffde0c741461013d57600080fd5b346101915760203660031901126101915760043580151580610185575b6101639061141e565b6000526003602052602060ff6040600020541661018360405180926113e0565bf35b5060025481111561015a565b600080fd5b34610191576020366003190112610191576101af611387565b6101b7611d0d565b6001600160a01b0316801561020957600080546001600160a01b03198116831782556001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a3005b631e4fbdf760e01b600052600060045260246000fd5b3461019157602036600319011261019157600435801515806103ae575b6102459061141e565b600052600360205260406000206005810180549061026282611556565b9261027060405194856114d7565b828452601f1961027f84611556565b0160005b81811061039757505060006007820192600a600984019301915b858110610314578660405180916020820160208352815180915260206040840192019060005b8181106102d1575050500390f35b919350916020608060019260608751858060a01b0381511683528481015185840152604081015115156040840152015160608201520194019101918493926102c3565b8061032160019284611669565b905460a084901b84900360039290921b1c166000818152602088815260408083205489835281842054928990529281902054905193909260ff9092169190610368856114bb565b84526020840152151560408301526060820152610385828a6115a0565b5261039081896115a0565b500161029d565b6020906103a26116cf565b82828901015201610283565b5060025481111561023c565b34610191576000366003190112610191576103e060018060a01b036001541633146115d6565b60206103ea611bf7565b6040519015158152f35b346101915760003660031901126101915760206103ea611737565b346101915760003660031901126101915761043560018060a01b036001541633146115d6565b60015b60025481116104ae5780600052600360205260406000209060ff8254169160058310156104985760026104779314908161048a575b5061047c5761153a565b610438565b61048581611d36565b61153a565b60019150015442118361046d565b634e487b7160e01b600052602160045260246000fd5b005b34610191576020366003190112610191576104c9611387565b6104d1611d0d565b6001600160a01b03168015610526576020817f63860f6674590a6969c4fe1dc738a9c8f955407c09e6c67a6bdb818f4c35cd8a926bffffffffffffffffffffffff60a01b6001541617600155604051908152a1005b60405162461bcd60e51b815260206004820152601a60248201527f496e76616c69642047616d654d617374657220616464726573730000000000006044820152606490fd5b346101915760003660031901126101915760025461058881611556565b9061059660405192836114d7565b808252601f196105a582611556565b0160005b8181106106b957505060015b8181111561062c578260405180916020820160208352815180915260206040840192019060005b8181106105ea575050500390f35b9193509160206080600192606087518051835261060d85820151868501906113e0565b60408101516040840152015160608201520194019101918493926105dc565b80600052600360205260406000209060ff8254169160086002820154910154906106686040519461065c866114bb565b848652602086016115ca565b604084015260608301526000198101918183116106a357826106989161069161069e95886115a0565b52856115a0565b5061153a565b6105b5565b634e487b7160e01b600052601160045260246000fd5b6020906106c46116cf565b828287010152016105a9565b34610191576000366003190112610191576001546040516001600160a01b039091168152602090f35b3461019157600036600319011261019157604080519061071981836114d7565b6005825264446f6f727360d81b6020830152805180926020825280519081602084015260005b82811061075e5750506000828201840152601f01601f19168101030190f35b60208282018101518783018701528694500161073f565b346101915760003660031901126101915760008060405160208101906307983f4560e21b825260976024820152602481526107b16044826114d7565b51908273dc2b0d2dd2b7759d97d50db4eabdc369731108305af13d15610866573d67ffffffffffffffff811161085057604051906107f9601f8201601f1916602001836114d7565b8152600060203d92013e5b1561080b57005b60405162461bcd60e51b815260206004820152601860248201527f4665654d20726567697374726174696f6e206661696c656400000000000000006044820152606490fd5b634e487b7160e01b600052604160045260246000fd5b610804565b34610191576000366003190112610191576000546040516001600160a01b039091168152602090f35b3461019157600036600319011261019157600254600160005b82821115610962576108bf915061156e565b600160005b838211156108de57604051806108da858261139d565b0390f35b6109059082600094939452600360205261090c60056040600020016040519384809261145c565b03836114d7565b6000905b825182101561094c57600190610944906001600160a01b0361093285876115a0565b511661093e82886115a0565b5261153a565b910190610910565b949293905061095b915061153a565b90926108c4565b6109816109879183600052600360205260056040600020015490611549565b9161153a565b906108ad565b346101915760403660031901126101915760043567ffffffffffffffff8111610191576109be9036906004016113ed565b60243567ffffffffffffffff8111610191576109de9036906004016113ed565b90926109f560018060a01b036001541633146115d6565b8215610c8857818303610c4357601483018084116106a357601384019081116106a357601490049160008315610c2f575082849394049184840690600080958460051b965b888110610a4357005b610a4e60025461153a565b9081600255816000526003602052604060002091600160ff19845416178355600060028401554260038401558890878310610c1c575b906000915b818310610aff57505050610aab6040519260408452600560408501910161145c565b82810360208401528781526001600160fb1b038811610191578260206001948c8f94817fb66ba8feaec509998ef3217bc97fbf1a0f906b89fac25a4ace8ddff059a41f12968583013701030190a101610a3a565b909195610b0d81878a611659565b356001600160a01b0381169790888103610191578815610bde578f92610b7f82610b4b8f8490600198610b46610bae988f600501611681565b611659565b3560408d600090815260078d016020522055604060008d815260068c01602052208660ff1982541617905560088a01611681565b604060008b815260098a01602052208460ff1982541617905582604060008c8152600b8b01602052205561153a565b9780600052600460205283604060002055600052600560205260406000208260ff19825416179055019190610a89565b60405162461bcd60e51b8152602060048201526016602482015275496e76616c696420706c61796572206164647265737360501b6044820152606490fd5b905060018901808a116106a35790610a84565b634e487b7160e01b81526012600452602490fd5b60405162461bcd60e51b815260206004820152601860248201527f4172726179206c656e67746873206d757374206d6174636800000000000000006044820152606490fd5b60405162461bcd60e51b8152602060048201526013602482015272139bc81c1b185e595c9cc81c1c9bdd9a591959606a1b6044820152606490fd5b34610191576020366003190112610191576020610ce6610ce1611387565b611622565b604051908152f35b3461019157600036600319011261019157610d07611d0d565b600080546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b3461019157600036600319011261019157610d6d60018060a01b036001541633146115d6565b60015b6002548111610e9057806000526003602052604060002090600a600283015410801590610e79575b15610e1c5760ff825416600581101561049857610dc0926004839203610dc5575b505061153a565b610d70565b610e127fa7690f576eaef889ef9ef29d1eaee6c0e3b073108b66bb8009ec8af6428bb34591600460ff1982541617815542600482015560405191829160208352600860208401910161145c565b0390a28083610db9565b60405162461bcd60e51b815260206004820152602f60248201527f4e6f7420616c6c20696e7374616e636573206861766520636f6d706c6574656460448201526e206d6178696d756d20726f756e647360881b6064820152608490fd5b5060ff825416600581101561049857600414610d98565b600254600160005b82821115610f3e57610eaa915061156e565b6000916001905b80821115610ec757604051806108da858261139d565b61090590826000949394526003602052610eee60086040600020016040519384809261145c565b60005b8251811015610f2b576001906001600160a01b03610f0f82866115a0565b5116610f24610f1d8961153a565b98876115a0565b5201610ef1565b509192610f38915061153a565b90610eb1565b610981610f5d9183600052600360205260086040600020015490611549565b90610e98565b34610191576020366003190112610191576001600160a01b03610f84611387565b166000526005602052602060ff604060002054166040519015158152f35b346101915760203660031901126101915760043560006080604051610fc68161149f565b828152826020820152826040820152826060820152015280151580611074575b610fef9061141e565b600052600360205260a0604060002060ff81541690600281015490600181015460046003830154920154926110306040519561102a8761149f565b866115ca565b6020850190815260408501918252606085019283526080850193845261105a6040518096516113e0565b516020850152516040840152516060830152516080820152f35b50600254811115610fe6565b3461019157602036600319011261019157600435801515806110de575b6110a69061141e565b60005260036020526108da6110cb6110d260056040600020016040519283809261145c565b03826114d7565b6040519182918261139d565b5060025481111561109d565b3461019157600036600319011261019157600254600160005b8282111561119b57611115915061156e565b600160005b8382111561113057604051806108da858261139d565b6109059082600094939452600360205261115760086040600020016040519384809261145c565b6000905b82518210156111855760019061117d906001600160a01b0361093285876115a0565b91019061115b565b9492939050611194915061153a565b909261111a565b6109816111ba9183600052600360205260086040600020015490611549565b90611103565b34610191576040366003190112610191576004356111dc611371565b908015158061124f575b6111ef9061141e565b806000526003602052600660406000200160018060a01b03831660005260205261122060ff604060002054166114f9565b600052600360205260076040600020019060018060a01b03166000526020526020604060002054604051908152f35b506002548111156111e6565b3461019157602036600319011261019157600435801515806112a6575b6112819061141e565b60005260036020526108da6110cb6110d260086040600020016040519283809261145c565b50600254811115611278565b34610191576020366003190112610191576001600160a01b036112d3611387565b1660005260046020526020604060002054604051908152f35b3461019157604036600319011261019157600435611308611371565b908015158061134a575b61131b9061141e565b6000526003602052600a6040600020019060018060a01b03166000526020526020604060002054604051908152f35b50600254811115611312565b34610191576000366003190112610191576020906002548152f35b602435906001600160a01b038216820361019157565b600435906001600160a01b038216820361019157565b602060408183019282815284518094520192019060005b8181106113c15750505090565b82516001600160a01b03168452602093840193909201916001016113b4565b9060058210156104985752565b9181601f840112156101915782359167ffffffffffffffff8311610191576020808501948460051b01011161019157565b1561142557565b60405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a590819d85b59481251608a1b6044820152606490fd5b906020825491828152019160005260206000209060005b8181106114805750505090565b82546001600160a01b0316845260209093019260019283019201611473565b60a0810190811067ffffffffffffffff82111761085057604052565b6080810190811067ffffffffffffffff82111761085057604052565b90601f8019910116810190811067ffffffffffffffff82111761085057604052565b1561150057565b60405162461bcd60e51b8152602060048201526012602482015271506c61796572206e6f7420696e2067616d6560701b6044820152606490fd5b60001981146106a35760010190565b919082018092116106a357565b67ffffffffffffffff81116108505760051b60200190565b9061157882611556565b61158560405191826114d7565b8281528092611596601f1991611556565b0190602036910137565b80518210156115b45760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b60058210156104985752565b156115dd57565b60405162461bcd60e51b815260206004820152601860248201527f4f6e6c792047616d654d61737465722063616e2063616c6c00000000000000006044820152606490fd5b6001600160a01b031660008181526005602052604090205460ff161561165357600052600460205260406000205490565b50600090565b91908110156115b45760051b0190565b80548210156115b45760005260206000200190600090565b908154916801000000000000000083101561085057826116a99160016116cd95018155611669565b81546001600160a01b0393841660039290921b91821b9390911b1916919091179055565b565b604051906116dc826114bb565b60006060838281528260208201528260408201520152565b8054801561172157600019019061170b8282611669565b81549060018060a01b039060031b1b1916905555565b634e487b7160e01b600052603160045260246000fd5b6000338152600560205261175160ff6040832054166114f9565b338152600460205260408120548082526003602052604082209160ff8354166005811015611be357600203611bac57338152600983016020819052604082205490939060ff1615611b705760018101544211611b6157338252600a81016020526040822080546117c09061153a565b90556000194301438111611b4d5760019060028301546040519060208201924083524260408301523360601b606083015260748201528560948201523060601b60b482015260a8815261181460c8826114d7565b519020161593604051858152847f4fff61170b45e4c2809f07a4bb02837d17fcdc209a7cb683ff938c9aa374100d60203393a38415611a07575b5050818152600360205281604082206002810192600a8454108015906119f8575b156118f35750916020917fa7690f576eaef889ef9ef29d1eaee6c0e3b073108b66bb8009ec8af6428bb3456118e57f8868888cc18628a149bc88cc32a91976ab30e2cd9aececb0cfe184a73fe551f995600460ff198254161781554260048201556040519182918783526008888401910161145c565b0390a254604051908152a290565b926020907f8868888cc18628a149bc88cc32a91976ab30e2cd9aececb0cfe184a73fe551f992600360ff1982541617905554604051908152a28181526003602052604081209060ff8254169060058210156119e45750600314806119d7575b806119c9575b61196157505090565b604081600160027fa359b664a68acd8839e42112eb50eff3408165e15074fde89ddb58a0db2e691d9401611995815461153a565b8155825460ff1916600217835554916119b66119b084612001565b42611549565b918291015582519182526020820152a290565b50600a600282015410611958565b5060088101541515611952565b634e487b7160e01b81526021600452602490fd5b5060016008830154111561186f565b3380845260209182526040808520805460ff199081169091558286526005845281862080549091169055908452600b8301918290528320546008830180549092906000198101908111611b395791600794939183611a6e948303611af4575b5050506116f4565b3380845291016020908152604080842054905190815284917f51479c93d7646904d2282e9e79cddf11999ac774b7fd0289e2f59cb4ad0f086a91a36001546001600160a01b0316803b15611af05781808092602460405180958193633ef6cf1d60e21b83523360048401525af11561184e57611ae9916114d7565b388161184e565b5080fd5b611afe9084611669565b905460039190911b1c6001600160a01b0316611b1e816116a98587611669565b6001600160a01b031687526020526040862055388080611a66565b634e487b7160e01b86526011600452602486fd5b634e487b7160e01b83526011600452602483fd5b509150611b6d90611d36565b90565b60405162461bcd60e51b81526020600482015260146024820152732737ba1030b71030b1ba34bb3290383630bcb2b960611b6044820152606490fd5b60405162461bcd60e51b815260206004820152600f60248201526e47616d65206e6f742061637469766560881b6044820152606490fd5b634e487b7160e01b82526021600452602482fd5b600160009160015b6002548111611cfd5780600052600360205260406000209360ff8554169060058210156104985760048214611cf157611c379061153a565b9460016000921480611ce4575b80611cd8575b15611ccc57600281019060018255600260ff198254161781556078420192834211611cb85750604083859493611cb3969460017fa359b664a68acd8839e42112eb50eff3408165e15074fde89ddb58a0db2e691d950155549082519182526020820152a261153a565b611bff565b634e487b7160e01b81526011600452602490fd5b509250611cb39061153a565b50600281015415611c4a565b5060088101541515611c44565b945050611cb39061153a565b509115611d075790565b50600190565b6000546001600160a01b03163303611d2157565b63118cdaa760e01b6000523360045260246000fd5b60008181526003602052604081206008810180549493925b858110611de75750507f8868888cc18628a149bc88cc32a91976ab30e2cd9aececb0cfe184a73fe551f991929350600460ff198254161781554260048201556002602091847fa7690f576eaef889ef9ef29d1eaee6c0e3b073108b66bb8009ec8af6428bb345611dd9604051611dc487826114d7565b6000815260003681376040519182918261139d565b0390a20154604051908152a2565b929093916000855415611fed57808660209252209560009660018060a01b0390541693838852600360205260408820926009840160018060a01b0387168a528060205260ff60408b20541615611fb4576001600160a01b0387168a5260209081526040808b20805460ff19908116909155888c5260059092528a2080549091169055600884019792895b895480821015611fa35788611e86838d611669565b905460039190911b1c6001600160a01b031614611ea65750600101611e71565b60009b949b9a929895979a99969399198101908111611f8f5782916116a9611ed4611eed93611ef296611669565b905460039190911b1c6001600160a01b03169184611669565b6116f4565b6001546001600160a01b0316803b15611f8b57602060408460078c9582808a997f51479c93d7646904d2282e9e79cddf11999ac774b7fd0289e2f59cb4ad0f086a98602460019e9d89519586938492633ef6cf1d60e21b845260048401525af1611f7b575b905050898060a01b03881683520183522054604051908152a3019493929194611d4e565b611f84916114d7565b3883611f57565b8280fd5b634e487b7160e01b85526011600452602485fd5b505095929497509592979097611ef2565b60405162461bcd60e51b8152602060048201526011602482015270506c61796572206e6f742061637469766560781b6044820152606490fd5b634e487b7160e01b81526032600452602490fd5b60001981019081116106a3576006810290808204600614901517156106a357603c811161203657607803607881116106a35790565b50603c9056fea2646970667358221220f2588108ac1b5586d3e69b8b65becb2ee8c3d4eedc356db4bdf3cc91b0ebf9aa64736f6c634300081c0033";

type DoorsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DoorsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Doors__factory extends ContractFactory {
  constructor(...args: DoorsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Doors & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Doors__factory {
    return super.connect(runner) as Doors__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DoorsInterface {
    return new Interface(_abi) as DoorsInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Doors {
    return new Contract(address, _abi, runner) as unknown as Doors;
  }
}
