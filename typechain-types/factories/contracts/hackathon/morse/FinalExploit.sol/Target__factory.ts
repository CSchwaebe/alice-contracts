/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../common";
import type {
  Target,
  TargetInterface,
} from "../../../../../contracts/hackathon/morse/FinalExploit.sol/Target";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "challenge",
        type: "address",
      },
    ],
    name: "callZ5",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getValue",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523460155761010d908161001b8239f35b600080fdfe6080806040526004361015601257600080fd5b600090813560e01c908163209652551460ba5750632821bf9014603457600080fd5b3460b757602036600319011260b757806004356001600160a01b0381169081900360b457803b1560b457819060046040518094819363088fa68560e11b83525af1801560a9576081575080f35b67ffffffffffffffff811160955760405280f35b634e487b7160e01b82526041600452602482fd5b6040513d84823e3d90fd5b50fd5b80fd5b90503460d3578160031936011260d35780602a60209252f35b5080fdfea26469706673582212204daadb10f3c68c642868ad5fe21b356fae503177778420d4d761e0da090c5bd864736f6c634300081c0033";

type TargetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TargetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Target__factory extends ContractFactory {
  constructor(...args: TargetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Target & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Target__factory {
    return super.connect(runner) as Target__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TargetInterface {
    return new Interface(_abi) as TargetInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Target {
    return new Contract(address, _abi, runner) as unknown as Target;
  }
}
