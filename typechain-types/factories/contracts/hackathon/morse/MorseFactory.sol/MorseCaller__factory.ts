/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../../../common";
import type {
  MorseCaller,
  MorseCallerInterface,
} from "../../../../../contracts/hackathon/morse/MorseFactory.sol/MorseCaller";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IMorse",
        name: "_challenge",
        type: "address",
      },
      {
        internalType: "address",
        name: "_target",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "caller",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "target",
        type: "address",
      },
    ],
    name: "CallerDeployed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "caller",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "target",
        type: "address",
      },
    ],
    name: "CallingZ1",
    type: "event",
  },
  {
    inputs: [],
    name: "authorize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "challenge",
    outputs: [
      {
        internalType: "contract IMorse",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "target",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60c0346100bf57601f6102eb38819003918201601f19168301916001600160401b038311848410176100c45780849260409485528339810103126100bf578051906001600160a01b03821682036100bf57602001516001600160a01b038116918282036100bf5760805260a05260405190307f10d660589785cdd088a212af057e6c80f35f899fc63b120ebaaade5655798cab600080a361021090816100db8239608051818181609f0152610133015260a0518181816057015260e30152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe608080604052600436101561001357600080fd5b600090813560e01c908163ababa4a7146100ce57508063d2ef7398146100895763d4b839921461004257600080fd5b346100865780600319360112610086576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b80fd5b50346100865780600319360112610086576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b9050346101d657816003193601126101d657817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031680307f2545b9ff3d5499a94f13afe40083242e0548a59537b0e2fb9f39c78d225dda1d8480a37f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690813b156101d2576319c7391960e21b84526001650fffffff000160c01b0319600485015260248401528290604490829084905af180156101c75761019e575080f35b67ffffffffffffffff81116101b35760405280f35b634e487b7160e01b82526041600452602482fd5b6040513d84823e3d90fd5b8280fd5b5080fdfea26469706673582212207f752e743924ab8f192eca9726564d2af99af627991e8bb4b986bd281c9dd72164736f6c634300081c0033";

type MorseCallerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MorseCallerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MorseCaller__factory extends ContractFactory {
  constructor(...args: MorseCallerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _challenge: AddressLike,
    _target: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_challenge, _target, overrides || {});
  }
  override deploy(
    _challenge: AddressLike,
    _target: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_challenge, _target, overrides || {}) as Promise<
      MorseCaller & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MorseCaller__factory {
    return super.connect(runner) as MorseCaller__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MorseCallerInterface {
    return new Interface(_abi) as MorseCallerInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): MorseCaller {
    return new Contract(address, _abi, runner) as unknown as MorseCaller;
  }
}
