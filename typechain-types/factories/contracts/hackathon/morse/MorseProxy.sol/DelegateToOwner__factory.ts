/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../../../common";
import type {
  DelegateToOwner,
  DelegateToOwnerInterface,
} from "../../../../../contracts/hackathon/morse/MorseProxy.sol/DelegateToOwner";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x60a034606457601f61014238819003918201601f19168301916001600160401b03831184841017606957808492602094604052833981010312606457516001600160a01b038116810360645760805260405160c2908161008082396080518160550152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe608060405260043610156035575b36156033573660008037600080368134335af13d6000803e15602e573d6000f35b3d6000fd5b005b60003560e01c638da5cb5b03600d573460875760003660031901126087577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166080908152602090f35b600080fdfea26469706673582212206a43c794769a2cb0d09207e59461d9a5cbab599c8518471c7d9f9bda3f39d49c64736f6c634300081c0033";

type DelegateToOwnerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DelegateToOwnerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DelegateToOwner__factory extends ContractFactory {
  constructor(...args: DelegateToOwnerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _owner: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_owner, overrides || {});
  }
  override deploy(
    _owner: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_owner, overrides || {}) as Promise<
      DelegateToOwner & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): DelegateToOwner__factory {
    return super.connect(runner) as DelegateToOwner__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DelegateToOwnerInterface {
    return new Interface(_abi) as DelegateToOwnerInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): DelegateToOwner {
    return new Contract(address, _abi, runner) as unknown as DelegateToOwner;
  }
}
