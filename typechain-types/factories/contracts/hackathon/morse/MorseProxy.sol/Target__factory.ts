/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../../../common";
import type {
  Target,
  TargetInterface,
} from "../../../../../contracts/hackathon/morse/MorseProxy.sol/Target";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_challenge",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "callZ5",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "challenge",
    outputs: [
      {
        internalType: "contract IMorse",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "doNothing",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608034607057601f6101b138819003918201601f19168301916001600160401b03831184841017607557808492602094604052833981010312607057516001600160a01b03811690819003607057600080546001600160a01b031916919091179055604051610125908161008c8239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe6080806040526004361015601257600080fd5b600090813560e01c9081632f576f201460dd5781636096395d146065575063d2ef739814603e57600080fd5b3460625780600319360112606257546040516001600160a01b039091168152602090f35b80fd5b90503460d9578160031936011260d957815482906001600160a01b0316803b1560d95760048383819363088fa68560e11b83525af1801560ce5760a6575080f35b67ffffffffffffffff811160ba5760405280f35b634e487b7160e01b82526041600452602482fd5b6040513d84823e3d90fd5b5080fd5b82346062578060031936011260625780f3fea2646970667358221220a3d268cfaeed4992a0eee3e813e60a0be3d8316dd988fda254684b93971a68dc64736f6c634300081c0033";

type TargetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TargetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Target__factory extends ContractFactory {
  constructor(...args: TargetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _challenge: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_challenge, overrides || {});
  }
  override deploy(
    _challenge: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_challenge, overrides || {}) as Promise<
      Target & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Target__factory {
    return super.connect(runner) as Target__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TargetInterface {
    return new Interface(_abi) as TargetInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Target {
    return new Contract(address, _abi, runner) as unknown as Target;
  }
}
