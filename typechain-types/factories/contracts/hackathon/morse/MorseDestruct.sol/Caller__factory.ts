/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../common";
import type {
  Caller,
  CallerInterface,
} from "../../../../../contracts/hackathon/morse/MorseDestruct.sol/Caller";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IMorse",
        name: "challenge",
        type: "address",
      },
      {
        internalType: "bytes8",
        name: "x",
        type: "bytes8",
      },
      {
        internalType: "address",
        name: "y",
        type: "address",
      },
    ],
    name: "callZ1",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523460155761011e908161001b8239f35b600080fdfe6080806040526004361015601257600080fd5b600090813560e01c6348a40edb14602857600080fd5b3460e457606036600319011260e457816004356001600160a01b0381169081900360e4576024359067ffffffffffffffff60c01b821680920360e0576044356001600160a01b0381169081900360dc57813b1560dc578360449286949285936319c7391960e21b8552600485015260248401525af1801560d15760a9575080f35b67ffffffffffffffff811160bd5760405280f35b634e487b7160e01b82526041600452602482fd5b6040513d84823e3d90fd5b8380fd5b8280fd5b5080fdfea26469706673582212200869760d6d799b7feeaf1f3bcf03935d8cccb5430e5fc19ca0ffb8e59188fa7e64736f6c634300081c0033";

type CallerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CallerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Caller__factory extends ContractFactory {
  constructor(...args: CallerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Caller & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Caller__factory {
    return super.connect(runner) as Caller__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CallerInterface {
    return new Interface(_abi) as CallerInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Caller {
    return new Contract(address, _abi, runner) as unknown as Caller;
  }
}
