/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../common";
import type {
  TargetContract,
  TargetContractInterface,
} from "../../../../../contracts/hackathon/morse/OneShotExploit.sol/TargetContract";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "challenge",
        type: "address",
      },
    ],
    name: "callZ5",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523460135760dd908160198239f35b600080fdfe6080806040526004361015601257600080fd5b600090813560e01c632821bf9014602857600080fd5b3460a357602036600319011260a357816004356001600160a01b0381169081900360a357803b1560a35760048383819363088fa68560e11b83525af180156098576070575080f35b67ffffffffffffffff811160845760405280f35b634e487b7160e01b82526041600452602482fd5b6040513d84823e3d90fd5b5080fdfea2646970667358221220276f1e32809b799a5c9d951986279ae6b9d6301c395b0ed7b6126338f7c7ef9764736f6c634300081c0033";

type TargetContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TargetContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TargetContract__factory extends ContractFactory {
  constructor(...args: TargetContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      TargetContract & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): TargetContract__factory {
    return super.connect(runner) as TargetContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TargetContractInterface {
    return new Interface(_abi) as TargetContractInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): TargetContract {
    return new Contract(address, _abi, runner) as unknown as TargetContract;
  }
}
