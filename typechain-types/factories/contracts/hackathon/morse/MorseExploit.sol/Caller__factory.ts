/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../common";
import type {
  Caller,
  CallerInterface,
} from "../../../../../contracts/hackathon/morse/MorseExploit.sol/Caller";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes8",
        name: "x",
        type: "bytes8",
      },
      {
        indexed: false,
        internalType: "address",
        name: "y",
        type: "address",
      },
    ],
    name: "CallingZ1",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "contract IMorse",
        name: "challenge",
        type: "address",
      },
      {
        internalType: "bytes8",
        name: "x",
        type: "bytes8",
      },
      {
        internalType: "address",
        name: "y",
        type: "address",
      },
    ],
    name: "callZ1",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60808060405234601557610183908161001b8239f35b600080fdfe608080604052600436101561001357600080fd5b600090813560e01c6348a40edb1461002a57600080fd5b34610149576060366003190112610149576004356001600160a01b03811691839183900361014957602435926001600160c01b03198416840361014157604435916001600160a01b0383168303610145576001600160c01b0319851681526001600160a01b03831660208201527f689b7fc9bb6492b740b163a111a180138ebde39c8f2de0aef6626ca0add8e2ef90604090a1803b15610141576040516319c7391960e21b81526001600160c01b031990941660048501526001600160a01b03909116602484015282908183816044810103925af180156101365761010d575080f35b67ffffffffffffffff81116101225760405280f35b634e487b7160e01b82526041600452602482fd5b6040513d84823e3d90fd5b8280fd5b8380fd5b5080fdfea2646970667358221220be014b8416fbd6ef84f543f050e2c205a7dcb2da416f3409bca663300c5fd63564736f6c634300081c0033";

type CallerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CallerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Caller__factory extends ContractFactory {
  constructor(...args: CallerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Caller & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Caller__factory {
    return super.connect(runner) as Caller__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CallerInterface {
    return new Interface(_abi) as CallerInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Caller {
    return new Contract(address, _abi, runner) as unknown as Caller;
  }
}
