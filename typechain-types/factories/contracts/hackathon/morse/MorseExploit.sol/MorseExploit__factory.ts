/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../common";
import type {
  MorseExploit,
  MorseExploitInterface,
} from "../../../../../contracts/hackathon/morse/MorseExploit.sol/MorseExploit";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "challenge",
        type: "address",
      },
    ],
    name: "exploit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60808060405234601557610162908161001b8239f35b600080fdfe608080604052600436101561001357600080fd5b6000803560e01c630aeb4ddf1461002957600080fd5b346100cf5760203660031901126100cf576004356001600160a01b03811692908390036100f057823b156100f0576319c7391960e21b81526001650fffffff000160c01b0319600482015260248101839052818160448183875af180156100d2576100e0575b508181923b156100dd5781809160046040518094819363088fa68560e11b83525af180156100d2576100be5750f35b816100c8916100f4565b6100cf5780f35b80fd5b6040513d84823e3d90fd5b50fd5b816100ea916100f4565b3861008f565b5080fd5b90601f8019910116810190811067ffffffffffffffff82111761011657604052565b634e487b7160e01b600052604160045260246000fdfea264697066735822122016ee55eb0f4973f51528bcdf9830c46389ae86cacbfe97640e3ca8ac3c8ef47564736f6c634300081c0033";

type MorseExploitConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MorseExploitConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MorseExploit__factory extends ContractFactory {
  constructor(...args: MorseExploitConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MorseExploit & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MorseExploit__factory {
    return super.connect(runner) as MorseExploit__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MorseExploitInterface {
    return new Interface(_abi) as MorseExploitInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MorseExploit {
    return new Contract(address, _abi, runner) as unknown as MorseExploit;
  }
}
